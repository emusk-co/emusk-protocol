{
  "address": "0x6a10A46F4692b4F44BDB8A11ae457542641760C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURIPrefix",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "bps",
          "type": "uint256[]"
        }
      ],
      "name": "SecondarySaleFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SignerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SignerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "encodePackedData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "getecrecover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721Base.Fee[]",
          "name": "_fees",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURIPrefix",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58506f42ddfa7b33a6d2c283e02b87d976424e8fc00ce7033936bad8d97d2f07",
  "receipt": {
    "to": null,
    "from": "0x3814dE21909d4C14d166898F1a2510DBA0c8702d",
    "contractAddress": "0x6a10A46F4692b4F44BDB8A11ae457542641760C2",
    "transactionIndex": 10,
    "gasUsed": "3225422",
    "logsBloom": "0x
    "blockHash": "0x062b2fffef18951d952edbc4c6fdbfec0c7027282e4c976332eb87fbe99ffbfa",
    "transactionHash": "0x58506f42ddfa7b33a6d2c283e02b87d976424e8fc00ce7033936bad8d97d2f07",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 28815933,
        "transactionHash": "0x58506f42ddfa7b33a6d2c283e02b87d976424e8fc00ce7033936bad8d97d2f07",
        "address": "0x6a10A46F4692b4F44BDB8A11ae457542641760C2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003814de21909d4c14d166898f1a2510dba0c8702d"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x062b2fffef18951d952edbc4c6fdbfec0c7027282e4c976332eb87fbe99ffbfa"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 28815933,
        "transactionHash": "0x58506f42ddfa7b33a6d2c283e02b87d976424e8fc00ce7033936bad8d97d2f07",
        "address": "0x6a10A46F4692b4F44BDB8A11ae457542641760C2",
        "topics": [
          "0x47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f24",
          "0x0000000000000000000000003814de21909d4c14d166898f1a2510dba0c8702d"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x062b2fffef18951d952edbc4c6fdbfec0c7027282e4c976332eb87fbe99ffbfa"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 28815933,
        "transactionHash": "0x58506f42ddfa7b33a6d2c283e02b87d976424e8fc00ce7033936bad8d97d2f07",
        "address": "0x6a10A46F4692b4F44BDB8A11ae457542641760C2",
        "topics": [
          "0x47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f24",
          "0x00000000000000000000000080aea81791ded20568221346c79b0ad4e0890faa"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x062b2fffef18951d952edbc4c6fdbfec0c7027282e4c976332eb87fbe99ffbfa"
      }
    ],
    "blockNumber": 28815933,
    "cumulativeGasUsed": "4769497",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ERC721EMUSK",
    "EMUSK",
    "0x80aEa81791Ded20568221346C79B0ad4E0890FAA",
    "https://api.emusk.com/contractMetadata/{address}",
    "https://ipfs.io/"
  ],
  "solcInputHash": "d6e83a1dd9b505d6d59703f04dc2089b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"name\":\"SecondarySaleFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"encodePackedData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getecrecover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721Base.Fee[]\",\"name\":\"_fees\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"anyone can mint token.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ERC721EMUSK\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC721EMUSK.sol\":\"ERC721EMUSK\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/ERC721EMUSK.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./common/Ownable.sol\\\";\\nimport \\\"./common/roles/SignerRole.sol\\\";\\nimport \\\"./interfaces/erc721/IERC721.sol\\\";\\nimport \\\"./token/erc721/ERC721Burnable.sol\\\";\\nimport \\\"./token/erc721/ERC721Base.sol\\\";\\n/**\\n * @title ERC721EMUSK\\n * @dev anyone can mint token.\\n */\\ncontract ERC721EMUSK is Ownable, SignerRole, IERC721, ERC721Burnable, ERC721Base {\\n\\n    constructor (string memory _name, string memory _symbol, address signer, string memory contractURI, string memory tokenURIPrefix) ERC721Base(_name, _symbol, contractURI, tokenURIPrefix) {\\n        _addSigner(signer);\\n        _registerInterface(bytes4(keccak256(\\\"MINT_WITH_ADDRESS\\\")));\\n    }\\n\\n    function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, Fee[] memory _fees, string memory _tokenURI) public {\\n        // require(isSigner(ecrecover(toEthSignedMessageHash(keccak256(abi.encodePacked(this, tokenId))), v, r, s)), \\\"owner should sign tokenId\\\");\\n        require(isSigner(ecrecover(keccak256(abi.encodePacked(this, tokenId)), v, r, s)), \\\"owner should sign tokenId\\\");\\n        _mint(msg.sender, tokenId, _fees);\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {\\n        _setTokenURIPrefix(tokenURIPrefix);\\n    }\\n\\n    function setContractURI(string memory contractURI) public onlyOwner {\\n        _setContractURI(contractURI);\\n    }\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\\n     */\\n    function _burn(address owner, uint256 tokenId) internal virtual override(ERC721, ERC721Base) {\\n        ERC721Base._burn(owner, tokenId);\\n    }\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal virtual override(ERC721,ERC721Base) {\\n        ERC721Base._transferFrom(from, to, tokenId);\\n    }\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual override(ERC721, ERC721Base) {\\n        ERC721Base._mint(to, tokenId);\\n    }\\n    \\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n    }\\n\\n    function encodePackedData(uint256 id) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(this, id));\\n    }\\n\\n\\n    function getecrecover(uint256 id, uint8 v, bytes32 r, bytes32 s) public view returns (address) {\\n        return ecrecover(toEthSignedMessageHash(keccak256(abi.encodePacked(this, id))), v, r, s);\\n    }\\n}\",\"keccak256\":\"0x88fe1d1df0069782062139cb3fc02acd05c6157a4b9f125c39e8139f26ef86e4\",\"license\":\"MIT\"},\"src/common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe6b0fd58ddc810aa58acc8e1ca5f29469775c74adb950df6afaa9e573a9162cf\",\"license\":\"MIT\"},\"src/common/Ownable.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa9a56e77d7f26f4dec5a5794c387ff70bcb2906e4a507dac5b00d600f4f66131\",\"license\":\"MIT\"},\"src/common/roles/SignerRole.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../Context.sol\\\";\\r\\nimport \\\"../../libraries/Roles.sol\\\";\\r\\nabstract contract SignerRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event SignerAdded(address indexed account);\\r\\n    event SignerRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _signers;\\r\\n\\r\\n    constructor() {\\r\\n        _addSigner(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlySigner() {\\r\\n        require(isSigner(_msgSender()), \\\"SignerRole: caller does not have the Signer role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isSigner(address account) public view returns (bool) {\\r\\n        return _signers.has(account);\\r\\n    }\\r\\n\\r\\n    function addSigner(address account) public onlySigner {\\r\\n        _addSigner(account);\\r\\n    }\\r\\n\\r\\n    function renounceSigner() public {\\r\\n        _removeSigner(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addSigner(address account) internal {\\r\\n        _signers.add(account);\\r\\n        emit SignerAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeSigner(address account) internal {\\r\\n        _signers.remove(account);\\r\\n        emit SignerRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3240265c818d19bce6aec7e0beb3151e210d57b46f7fcc1f67b1301fe96d12c\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x801185279a866409a85316dbdd01df9bfcc05e10d5c746513b4eca570aa28f24\",\"license\":\"MIT\"},\"src/interfaces/erc721/IERC721.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../IERC165.sol\\\";\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\nabstract contract IERC721 is IERC165 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of NFTs in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     *\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `from`, `to` cannot be zero.\\r\\n     * - `tokenId` must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this\\r\\n     * NFT by either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual;\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\r\\n     * either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual;\\r\\n    function approve(address to, uint256 tokenId) public virtual;\\r\\n    function getApproved(uint256 tokenId) public view virtual returns (address operator);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool _approved) public virtual;\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool);\\r\\n\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual;\\r\\n}\",\"keccak256\":\"0x90307fed5ef9b97b92630d342d29fcd10d00df44eede9613db76a17758e9a574\",\"license\":\"MIT\"},\"src/interfaces/erc721/IERC721Enumerable.sol\":{\"content\":\"\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\nabstract contract IERC721Enumerable is IERC721 {\\r\\n    function totalSupply() public view virtual returns (uint256);\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256 tokenId);\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256);\\r\\n}\",\"keccak256\":\"0xd7c03f6bcacdcd5dcd90180e65fb1286dd183b29c3e281c819d7f2904a34e66d\",\"license\":\"MIT\"},\"src/interfaces/erc721/IERC721Receiver.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\nabstract contract IERC721Receiver {\\r\\n    /**\\r\\n     * @notice Handle the receipt of an NFT\\r\\n     * @dev The ERC721 smart contract calls this function on the recipient\\r\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\r\\n     * otherwise the caller will revert the transaction. The selector to be\\r\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\r\\n     * function MAY throw to revert and reject the transfer.\\r\\n     * Note: the ERC721 contract address is always the message sender.\\r\\n     * @param operator The address which called `safeTransferFrom` function\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param tokenId The NFT identifier which is being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) \\r\\n    public virtual returns (bytes4);\\r\\n}\",\"keccak256\":\"0x48704e1e6b467bd626fa6a74f783833cec4333d347d7a1c22904eab413dd1599\",\"license\":\"MIT\"},\"src/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4a7d161516c0cd5a840a1747826339ec885ad1ec6c884015af8ac77f6572f4ba\",\"license\":\"MIT\"},\"src/libraries/Counters.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\r\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\r\\n * directly accessed.\\r\\n */\\r\\nlibrary Counters {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x52670fb090adbcea29ae2bb64cf683f1d87b85838cb35133ba1aacb531da337c\",\"license\":\"MIT\"},\"src/libraries/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd485e0ad64876b7ca593d3c20a2c84f3a80aecf74147108bc5d92dd55d573980\",\"license\":\"MIT\"},\"src/libraries/SafeMath.sol\":{\"content\":\"\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, throws on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        // uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, throws on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd450f20fed90e273b9278342d2a392cb1af56796d8a19824824ee60696f1438c\",\"license\":\"MIT\"},\"src/libraries/StringLibrary.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./UintLibrary.sol\\\";\\r\\nlibrary StringLibrary {\\r\\n    using UintLibrary for uint256;\\r\\n\\r\\n    function append(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory bab = new bytes(_ba.length + _bb.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\r\\n        return string(bab);\\r\\n    }\\r\\n\\r\\n    function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory _bc = bytes(_c);\\r\\n        bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) bbb[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) bbb[k++] = _bb[i];\\r\\n        for (uint i = 0; i < _bc.length; i++) bbb[k++] = _bc[i];\\r\\n        return string(bbb);\\r\\n    }\\r\\n\\r\\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        bytes memory msgBytes = bytes(message);\\r\\n        bytes memory fullMessage = concat(\\r\\n            bytes(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\"),\\r\\n            bytes(msgBytes.length.toString()),\\r\\n            msgBytes,\\r\\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\\r\\n        );\\r\\n        return ecrecover(keccak256(fullMessage), v, r, s);\\r\\n    }\\r\\n\\r\\n    function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {\\r\\n        bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];\\r\\n        for (uint i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];\\r\\n        for (uint i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];\\r\\n        for (uint i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];\\r\\n        for (uint i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];\\r\\n        for (uint i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];\\r\\n        return resultBytes;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe4f4f7ee846b8938a04ee4fbbf1e329343f95eba4e5aee7586365894df78ba3\",\"license\":\"MIT\"},\"src/libraries/UintLibrary.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./SafeMath.sol\\\";\\nlibrary UintLibrary {\\n    using SafeMath for uint;\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x9cf7b435b63c0ede500012aa77b773555f32b4be29cfb417cebad2ad7109d4f7\",\"license\":\"MIT\"},\"src/token/erc721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../libraries/SafeMath.sol\\\";\\r\\nimport \\\"../../libraries/Address.sol\\\";\\r\\nimport \\\"../../libraries/Counters.sol\\\";\\r\\nimport \\\"../../common/Context.sol\\\";\\r\\nimport \\\"../shared/ERC165.sol\\\";\\r\\nimport \\\"../../interfaces/erc721/IERC721.sol\\\";\\r\\nimport \\\"../../interfaces/erc721/IERC721Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    // Mapping from token ID to owner\\r\\n    mapping (uint256 => address) private _tokenOwner;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to number of owned token\\r\\n    mapping (address => Counters.Counter) private _ownedTokensCount;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\r\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\r\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\r\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\r\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\r\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\r\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\r\\n     *\\r\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    constructor() {\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner address to query the balance of\\r\\n     * @return uint256 representing the amount owned by the passed address\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        return _ownedTokensCount[owner].current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the owner of the specified token ID.\\r\\n     * @param tokenId uint256 ID of the token to query the owner of\\r\\n     * @return address currently marked as the owner of the given token ID\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approves another address to transfer the given token ID\\r\\n     * The zero address indicates there is no approved address.\\r\\n     * There can only be one approved address per token at a given time.\\r\\n     * Can only be called by the token owner or an approved operator.\\r\\n     * @param to address to be approved for the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be approved\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\r\\n     * Reverts if the token ID does not exist.\\r\\n     * @param tokenId uint256 ID of the token to query the approval of\\r\\n     * @return address currently approved for the given token ID\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets or unsets the approval of a given operator\\r\\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\\r\\n     * @param to operator address to set the approval\\r\\n     * @param approved representing the status of the approval to be set\\r\\n     */\\r\\n    function setApprovalForAll(address to, bool approved) public virtual override {\\r\\n        require(to != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][to] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), to, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tells whether an operator is approved by a given owner.\\r\\n     * @param owner owner address which you want to query the approval of\\r\\n     * @param operator operator address which you want to query the approval of\\r\\n     * @return bool whether the given operator is approved by the given owner\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of a given token ID to another address.\\r\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator.\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the _msgSender() to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers the ownership of a given token ID to another address\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * Requires the msg.sender to be the owner, approved, or operator\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\\r\\n        _transferFrom(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists.\\r\\n     * @param tokenId uint256 ID of the token to query the existence of\\r\\n     * @return bool whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        address owner = _tokenOwner[tokenId];\\r\\n        return owner != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the given spender can transfer a given token ID.\\r\\n     * @param spender address of the spender to query\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @return bool whether the msg.sender is approved for the given token ID,\\r\\n     * is an operator of the owner, or is the owner of the token\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to safely mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to safely mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * If the target address is a contract, it must implement `onERC721Received`,\\r\\n     * which is called upon a safe transfer, and return the magic value\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\r\\n     * the transfer is reverted.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     * @param _data bytes data to send along with a safe transfer check\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * @param to The address that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _tokenOwner[tokenId] = to;\\r\\n        _ownedTokensCount[to].increment();\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn a specific token.\\r\\n     * Reverts if the token does not exist.\\r\\n     * Deprecated, use {_burn} instead.\\r\\n     * @param owner owner of the token to burn\\r\\n     * @param tokenId uint256 ID of the token being burned\\r\\n     */\\r\\n    function _burn(address owner, uint256 tokenId) internal virtual {\\r\\n        require(ownerOf(tokenId) == owner, \\\"ERC721: burn of token that is not own\\\");\\r\\n\\r\\n        _clearApproval(tokenId);\\r\\n\\r\\n        _ownedTokensCount[owner].decrement();\\r\\n        _tokenOwner[tokenId] = address(0);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn a specific token.\\r\\n     * Reverts if the token does not exist.\\r\\n     * @param tokenId uint256 ID of the token being burned\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal {\\r\\n        _burn(ownerOf(tokenId), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\r\\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function _transferFrom(address from, address to, uint256 tokenId) internal virtual{\\r\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _clearApproval(tokenId);\\r\\n\\r\\n        _ownedTokensCount[from].decrement();\\r\\n        _ownedTokensCount[to].increment();\\r\\n\\r\\n        _tokenOwner[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * This is an internal detail of the `ERC721` contract and its use is deprecated.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        internal returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\\r\\n            IERC721Receiver(to).onERC721Received.selector,\\r\\n            _msgSender(),\\r\\n            from,\\r\\n            tokenId,\\r\\n            _data\\r\\n        ));\\r\\n        if (!success) {\\r\\n            if (returndata.length > 0) {\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n            }\\r\\n        } else {\\r\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n            return (retval == _ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to clear current approval of a given token ID.\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function _clearApproval(uint256 tokenId) private {\\r\\n        if (_tokenApprovals[tokenId] != address(0)) {\\r\\n            _tokenApprovals[tokenId] = address(0);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x56587c1d1227060243df1f610213588d7de0e1c2a7cc87a5e357d056681a7081\",\"license\":\"MIT\"},\"src/token/erc721/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../shared/HasSecondarySaleFees.sol\\\";\\nimport \\\"../shared/HasContractURI.sol\\\";\\nimport \\\"../shared/HasTokenURI.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\n\\n/**\\n * @title Full ERC721 Token with support for tokenURIPrefix\\n * This implementation includes all the required and some optional functionality of the ERC721 standard\\n * Moreover, it includes approve all functionality using operator terminology\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Base is HasSecondarySaleFees, ERC721, HasContractURI, HasTokenURI, ERC721Enumerable {\\n    // Token name\\n    string public name;\\n\\n    // Token symbol\\n    string public symbol;\\n\\n    struct Fee {\\n        address payable recipient;\\n        uint256 value;\\n    }\\n\\n    // id => fees\\n    mapping (uint256 => Fee[]) public fees;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor (string memory _name, string memory _symbol, string memory contractURI, string memory _tokenURIPrefix) HasContractURI(contractURI) HasTokenURI(_tokenURIPrefix) {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    function getFeeRecipients(uint256 id) public view virtual override returns (address payable[] memory) {\\n        Fee[] memory _fees = fees[id];\\n        address payable[] memory result = new address payable[](_fees.length);\\n        for (uint i = 0; i < _fees.length; i++) {\\n            result[i] = _fees[i].recipient;\\n        }\\n        return result;\\n    }\\n\\n    function getFeeBps(uint256 id) public view virtual override returns (uint[] memory) {\\n        Fee[] memory _fees = fees[id];\\n        uint[] memory result = new uint[](_fees.length);\\n        for (uint i = 0; i < _fees.length; i++) {\\n            result[i] = _fees[i].value;\\n        }\\n        return result;\\n    }\\n\\n    function _mint(address to, uint256 tokenId, Fee[] memory _fees) internal {\\n        _mint(to, tokenId);\\n        address[] memory recipients = new address[](_fees.length);\\n        uint[] memory bps = new uint[](_fees.length);\\n        for (uint i = 0; i < _fees.length; i++) {\\n            require(_fees[i].recipient != address(0x0), \\\"Recipient should be present\\\");\\n            require(_fees[i].value != 0, \\\"Fee value should be positive\\\");\\n            fees[tokenId].push(_fees[i]);\\n            recipients[i] = _fees[i].recipient;\\n            bps[i] = _fees[i].value;\\n        }\\n        if (_fees.length > 0) {\\n            emit SecondarySaleFees(tokenId, recipients, bps);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an URI for a given token ID.\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query\\n     */\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return super._tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the token URI for a given token.\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to set its URI\\n     * @param uri string URI to assign\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal virtual override {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        super._setTokenURI(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\\n     */\\n    function _burn(address owner, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable) {\\n        ERC721Enumerable._burn(owner, tokenId);\\n        _clearTokenURI(tokenId);\\n    }\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal virtual override(ERC721,ERC721Enumerable) {\\n        ERC721Enumerable._transferFrom(from, to, tokenId);\\n    }\\n        /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable) {\\n        ERC721Enumerable._mint(to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x785270d862349a8764daa5d1c6f0a250812d1813659d8eb733b8cf67e5132e53\",\"license\":\"MIT\"},\"src/token/erc721/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../common/Context.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\n/**\\r\\n * @title ERC721 Burnable Token\\r\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\r\\n */\\r\\ncontract ERC721Burnable is Context, ERC721 {\\r\\n    /**\\r\\n     * @dev Burns a specific ERC721 token.\\r\\n     * @param tokenId uint256 id of the ERC721 token to be burned.\\r\\n     */\\r\\n    function burn(uint256 tokenId) public {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfb9d16595ac5107cc4b453a01fbd9b74ffd73c40d4a442ffc413ea6ed741948c\",\"license\":\"MIT\"},\"src/token/erc721/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../common/Context.sol\\\";\\r\\nimport \\\"../shared/ERC165.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"../../interfaces/erc721/IERC721Enumerable.sol\\\";\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => uint256[]) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\r\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\r\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\r\\n     *\\r\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor function.\\r\\n     */\\r\\n    constructor() {\\r\\n        // register the supported interface to conform to ERC721Enumerable via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\\r\\n     * @param owner address owning the tokens list to be accessed\\r\\n     * @param index uint256 representing the index to be accessed of the requested tokens list\\r\\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the total amount of tokens stored by the contract.\\r\\n     * @return uint256 representing the total amount of tokens\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the token ID at a given index of all the tokens in this contract\\r\\n     * Reverts if the index is greater or equal to the total number of tokens.\\r\\n     * @param index uint256 representing the index to be accessed of the tokens list\\r\\n     * @return uint256 token ID at the given index of the tokens list\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\r\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\r\\n     * @param from current owner of the token\\r\\n     * @param to address to receive the ownership of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     */\\r\\n    function _transferFrom(address from, address to, uint256 tokenId) internal virtual override {\\r\\n        super._transferFrom(from, to, tokenId);\\r\\n\\r\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n\\r\\n        _addTokenToOwnerEnumeration(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to mint a new token.\\r\\n     * Reverts if the given token ID already exists.\\r\\n     * @param to address the beneficiary that will own the minted token\\r\\n     * @param tokenId uint256 ID of the token to be minted\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\r\\n        super._mint(to, tokenId);\\r\\n\\r\\n        _addTokenToOwnerEnumeration(to, tokenId);\\r\\n\\r\\n        _addTokenToAllTokensEnumeration(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn a specific token.\\r\\n     * Reverts if the token does not exist.\\r\\n     * Deprecated, use {ERC721-_burn} instead.\\r\\n     * @param owner owner of the token to burn\\r\\n     * @param tokenId uint256 ID of the token being burned\\r\\n     */\\r\\n    function _burn(address owner, uint256 tokenId) internal virtual override  {\\r\\n        super._burn(owner, tokenId);\\r\\n\\r\\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\\r\\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\\r\\n        _ownedTokensIndex[tokenId] = 0;\\r\\n\\r\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the list of token IDs of the requested owner.\\r\\n     * @param owner address owning the tokens\\r\\n     * @return uint256[] List of token IDs owned by the requested address\\r\\n     */\\r\\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\\r\\n        return _ownedTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\r\\n        _ownedTokens[to].push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n        // we have to use SafeMath in solidity 0.5.0 version\\r\\n        // uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\r\\n        // In Solidty 0.8+, we don't need to use SafeMath, because the integer underflow/overflow check is performed on a lower level.\\r\\n        uint256 lastTokenIndex = _ownedTokens[from].length - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        // _ownedTokens[from].length--;\\r\\n        // In solidity 0.8.0 version, we can't modify the length of array, we can only use pop() function to remove last elements.\\r\\n        _ownedTokens[from].pop();\\r\\n\\r\\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\\r\\n        // lastTokenId, or just over the end of the array if the token was the last one).\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n        // we have to use SafeMath in solidity 0.5.0 version\\r\\n        // uint256 lastTokenIndex = _allTokens.length.sub(1);\\r\\n        // In Solidty 0.8+, we don't need to use SafeMath, because the integer underflow/overflow check is performed on a lower level.\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        // _allTokens.length--;\\r\\n        // In solidity 0.8.0 version, we can't modify the length of array, we can only use pop() function to remove last elements.\\r\\n        _allTokens.pop();\\r\\n        _allTokensIndex[tokenId] = 0;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5ff79a4b944ec86b7f4acbd6dd5c8d28871053f0c018a80af697a4e64786db95\",\"license\":\"MIT\"},\"src/token/shared/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../interfaces/IERC165.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor() {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7d1456dd1651e7b607f2e6a354e5f9d88e2d24799ee9d809384800a7536e14d3\",\"license\":\"MIT\"},\"src/token/shared/HasContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ERC165.sol\\\";\\r\\ncontract HasContractURI is ERC165 {\\r\\n\\r\\n    string public contractURI;\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256('contractURI()')) == 0xe8a3d485\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\r\\n\\r\\n    constructor(string memory _contractURI) {\\r\\n        contractURI = _contractURI;\\r\\n        _registerInterface(_INTERFACE_ID_CONTRACT_URI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the contract URI\\r\\n     * @param _contractURI string URI prefix to assign\\r\\n     */\\r\\n    function _setContractURI(string memory _contractURI) internal {\\r\\n        contractURI = _contractURI;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x50ae5b69379c3e4be1ec5ef34a98fc89cba4d5b38ecc9d8aecf65fe1376c2663\",\"license\":\"MIT\"},\"src/token/shared/HasSecondarySaleFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ERC165.sol\\\";\\r\\nabstract contract HasSecondarySaleFees is ERC165 {\\r\\n\\r\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\r\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\r\\n     *\\r\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(_INTERFACE_ID_FEES);\\r\\n    }\\r\\n\\r\\n    function getFeeRecipients(uint256 id) public view virtual returns (address payable[] memory);\\r\\n    function getFeeBps(uint256 id) public view virtual returns (uint[] memory);\\r\\n}\",\"keccak256\":\"0x378a40cce8e08bb791df246fc052da273da1043418f2161d76ff3bd6827fa9fd\",\"license\":\"MIT\"},\"src/token/shared/HasTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../libraries/StringLibrary.sol\\\";\\r\\ncontract HasTokenURI {\\r\\n    using StringLibrary for string;\\r\\n\\r\\n    //Token URI prefix\\r\\n    string public tokenURIPrefix;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    constructor(string memory _tokenURIPrefix) {\\r\\n        tokenURIPrefix = _tokenURIPrefix;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an URI for a given token ID.\\r\\n     * Throws if the token ID does not exist. May return an empty string.\\r\\n     * @param tokenId uint256 ID of the token to query\\r\\n     */\\r\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\r\\n        return tokenURIPrefix.append(_tokenURIs[tokenId]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the token URI for a given token.\\r\\n     * Reverts if the token ID does not exist.\\r\\n     * @param tokenId uint256 ID of the token to set its URI\\r\\n     * @param uri string URI to assign\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal virtual{\\r\\n        _tokenURIs[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the token URI prefix.\\r\\n     * @param _tokenURIPrefix string URI prefix to assign\\r\\n     */\\r\\n    function _setTokenURIPrefix(string memory _tokenURIPrefix) internal {\\r\\n        tokenURIPrefix = _tokenURIPrefix;\\r\\n    }\\r\\n\\r\\n    function _clearTokenURI(uint256 tokenId) internal {\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8afa292d23831c3442a8a6150062e38435bac5ec715c56605ecc9da6f83eb0f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c8063715018a61161012a578063b9c4d9fb116100bd578063e8a3d4851161008c578063eb12d61e11610071578063eb12d61e146104d5578063f2fde38b146104e8578063f53bbb7f146104fb57600080fd5b8063e8a3d48514610491578063e985e9c51461049957600080fd5b8063b9c4d9fb1461044e578063c0ac99831461046e578063c87b56dd14610476578063e5c8b03d1461048957600080fd5b806395d89b41116100f957806395d89b411461040d57806399e0dd7c14610415578063a22cb46514610428578063b88d4fde1461043b57600080fd5b8063715018a6146103ce5780637df73e27146103d65780638da5cb5b146103e9578063938e3d7b146103fa57600080fd5b80632f745c59116101a25780636308f1cd116101715780636308f1cd146103635780636352211e14610395578063672a9400146103a857806370a08231146103bb57600080fd5b80632f745c591461031757806342842e0e1461032a57806342966c681461033d5780634f6ccce71461035057600080fd5b80630ebd4c7f116101de5780630ebd4c7f146102bf57806318160ddd146102df5780631ff702a8146102f157806323b872dd1461030457600080fd5b806301ffc9a71461021057806306fdde031461026a578063081812fc1461027f578063095ea7b3146102aa575b600080fd5b61025561021e366004612af4565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526002602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61027261050e565b6040516102619190612b69565b61029261028d366004612b7c565b61059c565b6040516001600160a01b039091168152602001610261565b6102bd6102b8366004612baa565b610647565b005b6102d26102cd366004612b7c565b6107d3565b6040516102619190612c11565b600c545b604051908152602001610261565b6102e36102ff366004612b7c565b6108f5565b6102bd610312366004612c24565b61093b565b6102e3610325366004612baa565b6109c8565b6102bd610338366004612c24565b610a84565b6102bd61034b366004612b7c565b610a9f565b6102e361035e366004612b7c565b610b26565b610376610371366004612c65565b610bca565b604080516001600160a01b039093168352602083019190915201610261565b6102926103a3366004612b7c565b610c10565b6102bd6103b6366004612d85565b610ca1565b6102e36103c9366004612eac565b610da3565b6102bd610e3f565b6102556103e4366004612eac565b610ea5565b6000546001600160a01b0316610292565b6102bd610408366004612ec9565b610eb2565b610272610f15565b6102bd610423366004612ec9565b610f22565b6102bd610436366004612efe565b610f85565b6102bd610449366004612f3c565b61104a565b61046161045c366004612b7c565b6110d8565b6040516102619190612fbc565b6102726111ff565b610272610484366004612b7c565b61120c565b6102bd6112a2565b6102726112ab565b6102556104a7366004612ffd565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102bd6104e3366004612eac565b6112b8565b6102bd6104f6366004612eac565b61133c565b61029261050936600461302b565b61141b565b600e805461051b90613066565b80601f016020809104026020016040519081016040528092919081815260200182805461054790613066565b80156105945780601f1061056957610100808354040283529160200191610594565b820191906000526020600020905b81548152906001019060200180831161057757829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b031661062b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061065282610c10565b9050806001600160a01b0316836001600160a01b031614156106dc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610622565b336001600160a01b03821614806106f857506106f881336104a7565b61076a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610622565b600082815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152601060209081526040808320805482518185028101850190935280835260609493849084015b82821015610846576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016107fe565b5050505090506000815167ffffffffffffffff81111561086857610868612c9d565b604051908082528060200260200182016040528015610891578160200160208202803683370190505b50905060005b82518110156108ed578281815181106108b2576108b26130a1565b6020026020010151602001518282815181106108d0576108d06130a1565b6020908102919091010152806108e5816130cd565b915050610897565b509392505050565b6040516bffffffffffffffffffffffff193060601b166020820152603481018290526000906054015b604051602081830303815290604052805190602001209050919050565b610946335b82611544565b6109b85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610622565b6109c3838383611648565b505050565b60006109d383610da3565b8210610a475760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610622565b6001600160a01b0383166000908152600a60205260409020805483908110610a7157610a716130a1565b9060005260206000200154905092915050565b6109c38383836040518060200160405280600081525061104a565b610aa833610940565b610b1a5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f766564000000000000000000000000000000006064820152608401610622565b610b2381611653565b50565b6000610b31600c5490565b8210610ba55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610622565b600c8281548110610bb857610bb86130a1565b90600052602060002001549050919050565b60106020528160005260406000208181548110610be657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6000818152600360205260408120546001600160a01b031680610c9b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610622565b92915050565b6040516bffffffffffffffffffffffff193060601b16602082015260348101879052610d3a9060019060540160408051601f198184030181528282528051602091820120600084529083018083525260ff891690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015610d2b573d6000803e3d6000fd5b50505060206040510351610ea5565b610d865760405162461bcd60e51b815260206004820152601960248201527f6f776e65722073686f756c64207369676e20746f6b656e4964000000000000006044820152606401610622565b610d91338784611665565b610d9b868261195b565b505050505050565b60006001600160a01b038216610e215760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610622565b6001600160a01b038216600090815260056020526040902054610c9b565b6000546001600160a01b03163314610e995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610622565b610ea360006119f3565b565b6000610c9b600183611a50565b6000546001600160a01b03163314610f0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610622565b610b2381611aee565b600f805461051b90613066565b6000546001600160a01b03163314610f7c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610622565b610b2381611b01565b6001600160a01b038216331415610fde5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610622565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110543383611544565b6110c65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610622565b6110d284848484611b14565b50505050565b6000818152601060209081526040808320805482518185028101850190935280835260609493849084015b8282101561114b576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611103565b5050505090506000815167ffffffffffffffff81111561116d5761116d612c9d565b604051908082528060200260200182016040528015611196578160200160208202803683370190505b50905060005b82518110156108ed578281815181106111b7576111b76130a1565b6020026020010151600001518282815181106111d5576111d56130a1565b6001600160a01b0390921660209283029190910190910152806111f7816130cd565b91505061119c565b6008805461051b90613066565b6000818152600360205260409020546060906001600160a01b03166112995760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610622565b610c9b82611b9d565b610ea333611cd4565b6007805461051b90613066565b6112c133610ea5565b6113335760405162461bcd60e51b815260206004820152603060248201527f5369676e6572526f6c653a2063616c6c657220646f6573206e6f74206861766560448201527f20746865205369676e657220726f6c65000000000000000000000000000000006064820152608401610622565b610b2381611d16565b6000546001600160a01b031633146113965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610622565b6001600160a01b0381166114125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610622565b610b23816119f3565b6040516bffffffffffffffffffffffff193060601b166020820152603481018590526000906001906114659060540160405160208183030381529060405280519060200120611d58565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156114b3573d6000803e3d6000fd5b5050506020604051035190505b949350505050565b6114d28282611a50565b1561151f5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610622565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6000818152600360205260408120546001600160a01b03166115ce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610622565b60006115d983610c10565b9050806001600160a01b0316846001600160a01b031614806116145750836001600160a01b03166116098461059c565b6001600160a01b0316145b806114c057506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff166114c0565b6109c3838383611d93565b610b2361165f82610c10565b82611d9e565b61166f8383611da8565b6000815167ffffffffffffffff81111561168b5761168b612c9d565b6040519080825280602002602001820160405280156116b4578160200160208202803683370190505b5090506000825167ffffffffffffffff8111156116d3576116d3612c9d565b6040519080825280602002602001820160405280156116fc578160200160208202803683370190505b50905060005b83518110156119105760006001600160a01b0316848281518110611728576117286130a1565b6020026020010151600001516001600160a01b0316141561178b5760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610622565b83818151811061179d5761179d6130a1565b602002602001015160200151600014156117f95760405162461bcd60e51b815260206004820152601c60248201527f4665652076616c75652073686f756c6420626520706f736974697665000000006044820152606401610622565b6000858152601060205260409020845185908390811061181b5761181b6130a1565b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911781559101519101558351849082908110611885576118856130a1565b6020026020010151600001518382815181106118a3576118a36130a1565b60200260200101906001600160a01b031690816001600160a01b0316815250508381815181106118d5576118d56130a1565b6020026020010151602001518282815181106118f3576118f36130a1565b602090810291909101015280611908816130cd565b915050611702565b50825115611954577f99aba1d63749cfd5ad1afda7c4663840924d54eb5f005bbbeadedc6ec13674b284838360405161194b93929190613106565b60405180910390a15b5050505050565b6000828152600360205260409020546001600160a01b03166119e55760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610622565b6119ef8282611db2565b5050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b038216611ace5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610622565b506001600160a01b03166000908152602091909152604090205460ff1690565b80516119ef9060079060208401906129f7565b80516119ef9060089060208401906129f7565b611b1f848484611648565b611b2b84848484611dd1565b6110d25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610622565b60008181526009602052604090208054606091610c9b91611bbd90613066565b80601f0160208091040260200160405190810160405280929190818152602001828054611be990613066565b8015611c365780601f10611c0b57610100808354040283529160200191611c36565b820191906000526020600020905b815481529060010190602001808311611c1957829003601f168201915b505050505060088054611c4890613066565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7490613066565b8015611cc15780601f10611c9657610100808354040283529160200191611cc1565b820191906000526020600020905b815481529060010190602001808311611ca457829003601f168201915b5050505050611fc990919063ffffffff16565b611cdf60018261217a565b6040516001600160a01b038216907f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b90600090a250565b611d216001826114c8565b6040516001600160a01b038216907f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f2490600090a250565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c0161091e565b6109c3838383612218565b6119ef828261226d565b6119ef8282612280565b600082815260096020908152604090912082516109c3928401906129f7565b60006001600160a01b0384163b611dea575060016114c0565b6000806001600160a01b0386167f150b7a020000000000000000000000000000000000000000000000000000000033898888604051602401611e2f9493929190613170565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611e9a91906131ac565b6000604051808303816000865af19150503d8060008114611ed7576040519150601f19603f3d011682016040523d82523d6000602084013e611edc565b606091505b509150915081611f6457805115611ef65780518082602001fd5b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610622565b600081806020019051810190611f7a91906131c8565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001493506114c092505050565b8051825160609184918491600091611fe191906131e5565b67ffffffffffffffff811115611ff957611ff9612c9d565b6040519080825280601f01601f191660200182016040528015612023576020820181803683370190505b5090506000805b84518110156120ca57848181518110612045576120456130a1565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383612077816130cd565b945081518110612089576120896130a1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806120c2816130cd565b91505061202a565b5060005b835181101561216e578381815181106120e9576120e96130a1565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016838361211b816130cd565b94508151811061212d5761212d6130a1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080612166816130cd565b9150506120ce565b50909695505050505050565b6121848282611a50565b6121f65760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610622565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b61222383838361228a565b61222d8382612448565b6001600160a01b03919091166000908152600a602081815260408084208054868652600b8452918520829055928252600181018355918352909120015550565b6122778282612557565b6119ef81612583565b6119ef82826125ba565b826001600160a01b031661229d82610c10565b6001600160a01b0316146123195760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610622565b6001600160a01b0382166123945760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610622565b61239d8161263f565b6001600160a01b03831660009081526005602052604090206123be90612687565b6001600160a01b03821660009081526005602052604090206123df90612698565b600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166000908152600a602052604081205461246d906001906131fd565b6000838152600b6020526040902054909150808214612514576001600160a01b0384166000908152600a602052604081208054849081106124b0576124b06130a1565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106124f4576124f46130a1565b6000918252602080832090910192909255918252600b9052604090208190555b6001600160a01b0384166000908152600a6020526040902080548061253b5761253b613214565b6001900381819060005260206000200160009055905550505050565b61256182826126b5565b61256b8282612448565b6000818152600b60205260408120556119ef816127d0565b6000818152600960205260409020805461259c90613066565b159050610b23576000818152600960205260408120610b2391612a7b565b6125c48282612891565b6001600160a01b03919091166000908152600a602090815260408083208054858552600b84528285208190556001808201835591855283852001859055600c8054868652600d909452918420839055820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70155565b6000818152600460205260409020546001600160a01b031615610b23576000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b80546126949060016129d4565b9055565b60018160000160008282546126ad91906131e5565b909155505050565b816001600160a01b03166126c882610c10565b6001600160a01b0316146127445760405162461bcd60e51b815260206004820152602560248201527f4552433732313a206275726e206f6620746f6b656e2074686174206973206e6f60448201527f74206f776e0000000000000000000000000000000000000000000000000000006064820152608401610622565b61274d8161263f565b6001600160a01b038216600090815260056020526040902061276e90612687565b600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600c546000906127e2906001906131fd565b6000838152600d6020526040812054600c805493945090928490811061280a5761280a6130a1565b9060005260206000200154905080600c838154811061282b5761282b6130a1565b6000918252602080832090910192909255828152600d90915260409020829055600c80548061285c5761285c613214565b600190038181906000526020600020016000905590556000600d60008681526020019081526020016000208190555050505050565b6001600160a01b0382166128e75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610622565b6000818152600360205260409020546001600160a01b03161561294c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610622565b6000818152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915583526005909152902061299890612698565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828211156129e6576129e661322a565b6129f082846131fd565b9392505050565b828054612a0390613066565b90600052602060002090601f016020900481019282612a255760008555612a6b565b82601f10612a3e57805160ff1916838001178555612a6b565b82800160010185558215612a6b579182015b82811115612a6b578251825591602001919060010190612a50565b50612a77929150612ab1565b5090565b508054612a8790613066565b6000825580601f10612a97575050565b601f016020900490600052602060002090810190610b2391905b5b80821115612a775760008155600101612ab2565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610b2357600080fd5b600060208284031215612b0657600080fd5b81356129f081612ac6565b60005b83811015612b2c578181015183820152602001612b14565b838111156110d25750506000910152565b60008151808452612b55816020860160208601612b11565b601f01601f19169290920160200192915050565b6020815260006129f06020830184612b3d565b600060208284031215612b8e57600080fd5b5035919050565b6001600160a01b0381168114610b2357600080fd5b60008060408385031215612bbd57600080fd5b8235612bc881612b95565b946020939093013593505050565b600081518084526020808501945080840160005b83811015612c0657815187529582019590820190600101612bea565b509495945050505050565b6020815260006129f06020830184612bd6565b600080600060608486031215612c3957600080fd5b8335612c4481612b95565b92506020840135612c5481612b95565b929592945050506040919091013590565b60008060408385031215612c7857600080fd5b50508035926020909101359150565b803560ff81168114612c9857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cd657612cd6612c9d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d0557612d05612c9d565b604052919050565b600067ffffffffffffffff831115612d2757612d27612c9d565b612d3a6020601f19601f86011601612cdc565b9050828152838383011115612d4e57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612d7657600080fd5b6129f083833560208501612d0d565b60008060008060008060c08789031215612d9e57600080fd5b863595506020612daf818901612c87565b95506040880135945060608801359350608088013567ffffffffffffffff80821115612dda57600080fd5b818a0191508a601f830112612dee57600080fd5b813581811115612e0057612e00612c9d565b612e0e848260051b01612cdc565b81815260069190911b8301840190848101908d831115612e2d57600080fd5b938501935b82851015612e79576040858f031215612e4b5760008081fd5b612e53612cb3565b8535612e5e81612b95565b81528587013587820152825260409094019390850190612e32565b9650505060a08a0135925080831115612e9157600080fd5b5050612e9f89828a01612d65565b9150509295509295509295565b600060208284031215612ebe57600080fd5b81356129f081612b95565b600060208284031215612edb57600080fd5b813567ffffffffffffffff811115612ef257600080fd5b6114c084828501612d65565b60008060408385031215612f1157600080fd5b8235612f1c81612b95565b915060208301358015158114612f3157600080fd5b809150509250929050565b60008060008060808587031215612f5257600080fd5b8435612f5d81612b95565b93506020850135612f6d81612b95565b925060408501359150606085013567ffffffffffffffff811115612f9057600080fd5b8501601f81018713612fa157600080fd5b612fb087823560208401612d0d565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561216e5783516001600160a01b031683529284019291840191600101612fd8565b6000806040838503121561301057600080fd5b823561301b81612b95565b91506020830135612f3181612b95565b6000806000806080858703121561304157600080fd5b8435935061305160208601612c87565b93969395505050506040820135916060013590565b600181811c9082168061307a57607f821691505b6020821081141561309b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130ff576130ff6130b7565b5060010190565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156131505784516001600160a01b03168352938301939183019160010161312b565b505084810360408601526131648187612bd6565b98975050505050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131a26080830184612b3d565b9695505050505050565b600082516131be818460208701612b11565b9190910192915050565b6000602082840312156131da57600080fd5b81516129f081612ac6565b600082198211156131f8576131f86130b7565b500190565b60008282101561320f5761320f6130b7565b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220d1d8c47787b2d49244e5120ea45c6064c223163293b0ee36819dd9cd0d518b6a64736f6c63430008090033",
  "devdoc": {
    "details": "anyone can mint token.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ERC721EMUSK",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1540,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1774,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_signers",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Role)2723_storage"
      },
      {
        "astId": 6327,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 4843,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4847,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4852,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)2672_storage)"
      },
      {
        "astId": 4858,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6376,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "contractURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6456,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "tokenURIPrefix",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 6460,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5976,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5980,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5983,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_allTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5987,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5545,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "name",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 5547,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "symbol",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 5558,
        "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
        "label": "fees",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_struct(Fee)5552_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Fee)5552_storage)dyn_storage": {
        "base": "t_struct(Fee)5552_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC721Base.Fee[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Counter)2672_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)2672_storage"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Fee)5552_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721Base.Fee[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Fee)5552_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2672_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2671,
            "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fee)5552_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Base.Fee",
        "members": [
          {
            "astId": 5549,
            "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 5551,
            "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Role)2723_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2722,
            "contract": "src/ERC721EMUSK.sol:ERC721EMUSK",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}