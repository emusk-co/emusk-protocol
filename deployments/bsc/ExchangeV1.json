{
  "address": "0xcc22B79DE394Ef078c8583e5B55cE819892d1aE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "contract TransferProxyForDeprecated",
          "name": "_transferProxyForDeprecated",
          "type": "address"
        },
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "contract ExchangeStateV1",
          "name": "_state",
          "type": "address"
        },
        {
          "internalType": "contract ExchangeOrdersHolderV1",
          "name": "_ordersHolder",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerFeeSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerFeeSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "sellAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "buyAsset",
              "type": "tuple"
            }
          ],
          "internalType": "struct ExchangeDomainV1.OrderKey",
          "name": "key",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TransferProxy",
      "outputs": [
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Sig",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "buyerFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Sig",
          "name": "buyerFeeSig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ordersHolder",
      "outputs": [
        {
          "internalType": "contract ExchangeOrdersHolderV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "prepareBuyerFeeMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "prepareMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBuyerFeeSigner",
          "type": "address"
        }
      ],
      "name": "setBuyerFeeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract ExchangeStateV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxyForDeprecated",
      "outputs": [
        {
          "internalType": "contract TransferProxyForDeprecated",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c745f205981e9a7f59f85da2208a117bab66dc8a794ddba2cd0808737032426",
  "receipt": {
    "to": null,
    "from": "0xAEFaf0D3716431417Af27d0d736f71b3CcF507a6",
    "contractAddress": "0xcc22B79DE394Ef078c8583e5B55cE819892d1aE5",
    "transactionIndex": 0,
    "gasUsed": "2410060",
    "logsBloom": "0x
    "blockHash": "0xcb3752c6e11cf118b2c1239422a1afff3fe10dae502a5614868de471826b3748",
    "transactionHash": "0x0c745f205981e9a7f59f85da2208a117bab66dc8a794ddba2cd0808737032426",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13636204,
        "transactionHash": "0x0c745f205981e9a7f59f85da2208a117bab66dc8a794ddba2cd0808737032426",
        "address": "0xcc22B79DE394Ef078c8583e5B55cE819892d1aE5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aefaf0d3716431417af27d0d736f71b3ccf507a6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcb3752c6e11cf118b2c1239422a1afff3fe10dae502a5614868de471826b3748"
      }
    ],
    "blockNumber": 13636204,
    "cumulativeGasUsed": "2410060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeAA1feD18Bc08BDEe188ABb34239884597b88e1a",
    "0xc2bb46c09D9Ee587a22D776404a45B3a5244A228",
    "0x1B0555645079B0e4e2953195C215E08d6fC78709",
    "0x13A60E9AB67b629A8c2499865d77f3c7B28F1DB7",
    "0xEc9FdF5C7aEB89Ecb829bf7B00b67AD15907E58B",
    "0xAEFaf0D3716431417Af27d0d736f71b3CcF507a6",
    "0x80aEa81791Ded20568221346C79B0ad4E0890FAA"
  ],
  "solcInputHash": "d6e83a1dd9b505d6d59703f04dc2089b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract TransferProxyForDeprecated\",\"name\":\"_transferProxyForDeprecated\",\"type\":\"address\"},{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"contract ExchangeOrdersHolderV1\",\"name\":\"_ordersHolder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerFeeSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerFeeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ExchangeDomainV1.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ExchangeDomainV1.Sig\",\"name\":\"buyerFeeSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordersHolder\",\"outputs\":[{\"internalType\":\"contract ExchangeOrdersHolderV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"prepareBuyerFeeMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyerFeeSigner\",\"type\":\"address\"}],\"name\":\"setBuyerFeeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxyForDeprecated\",\"outputs\":[{\"internalType\":\"contract TransferProxyForDeprecated\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ExchangeV1.sol\":\"ExchangeV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/ExchangeV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./common/Ownable.sol\\\";\\nimport \\\"./marketplace/ExchangeDomainV1.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/UintLibrary.sol\\\";\\nimport \\\"./libraries/StringLibrary.sol\\\";\\nimport \\\"./libraries/BytesLibrary.sol\\\";\\nimport \\\"./marketplace/transferproxy/TransferProxy.sol\\\";\\nimport \\\"./marketplace/transferproxy/ERC20TransferProxy.sol\\\";\\nimport \\\"./marketplace/transferproxy/TransferProxyForDeprecated.sol\\\";\\nimport \\\"./marketplace/ExchangeStateV1.sol\\\";\\nimport \\\"./marketplace/ExchangeOrdersHolderV1.sol\\\";\\nimport \\\"./token/shared/HasSecondarySaleFees.sol\\\";\\ncontract ExchangeV1 is Ownable, ExchangeDomainV1 {\\n    using SafeMath for uint;\\n    using UintLibrary for uint;\\n    using StringLibrary for string;\\n    using BytesLibrary for bytes32;\\n\\n    enum FeeSide {NONE, SELL, BUY}\\n\\n    event Buy(\\n        address indexed sellToken, uint256 indexed sellTokenId, uint256 sellValue,\\n        address owner,\\n        address buyToken, uint256 buyTokenId, uint256 buyValue,\\n        address buyer,\\n        uint256 amount,\\n        uint256 salt\\n    );\\n\\n    event Cancel(\\n        address indexed sellToken, uint256 indexed sellTokenId,\\n        address owner,\\n        address buyToken, uint256 buyTokenId,\\n        uint256 salt\\n    );\\n\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\\n\\n    address payable public beneficiary;\\n    address public buyerFeeSigner;\\n\\n    TransferProxy public transferProxy;\\n    TransferProxyForDeprecated public transferProxyForDeprecated;\\n    ERC20TransferProxy public erc20TransferProxy;\\n    ExchangeStateV1 public state;\\n    ExchangeOrdersHolderV1 public ordersHolder;\\n\\n    constructor(\\n        TransferProxy _transferProxy, TransferProxyForDeprecated _transferProxyForDeprecated, ERC20TransferProxy _erc20TransferProxy, ExchangeStateV1 _state,\\n        ExchangeOrdersHolderV1 _ordersHolder, address payable _beneficiary, address _buyerFeeSigner\\n    ) {\\n        transferProxy = _transferProxy;\\n        transferProxyForDeprecated = _transferProxyForDeprecated;\\n        erc20TransferProxy = _erc20TransferProxy;\\n        state = _state;\\n        ordersHolder = _ordersHolder;\\n        beneficiary = _beneficiary;\\n        buyerFeeSigner = _buyerFeeSigner;\\n    }\\n\\n    function setBeneficiary(address payable newBeneficiary) external onlyOwner {\\n        beneficiary = newBeneficiary;\\n    }\\n\\n    function setBuyerFeeSigner(address newBuyerFeeSigner) external onlyOwner {\\n        buyerFeeSigner = newBuyerFeeSigner;\\n    }\\n\\n    function exchange(\\n        Order calldata order,\\n        Sig calldata sig,\\n        uint buyerFee,\\n        Sig calldata buyerFeeSig,\\n        uint amount,\\n        address buyer\\n    ) payable external {\\n        validateOrderSig(order, sig);\\n        validateBuyerFeeSig(order, buyerFee, buyerFeeSig);\\n        uint paying = order.buying.mul(amount).div(order.selling);\\n        verifyOpenAndModifyOrderState(order.key, order.selling, amount);\\n        require(order.key.sellAsset.assetType != AssetType.ETH, \\\"ETH is not supported on sell side\\\");\\n        if (order.key.buyAsset.assetType == AssetType.ETH) {\\n            validateEthTransfer(paying, buyerFee);\\n        }\\n        FeeSide feeSide = getFeeSide(order.key.sellAsset.assetType, order.key.buyAsset.assetType);\\n        if (buyer == address(0x0)) {\\n            buyer = msg.sender;\\n        }\\n        transferWithFeesPossibility(order.key.sellAsset, amount, order.key.owner, buyer, feeSide == FeeSide.SELL, buyerFee, order.sellerFee, order.key.buyAsset);\\n        transferWithFeesPossibility(order.key.buyAsset, paying, msg.sender, order.key.owner, feeSide == FeeSide.BUY, order.sellerFee, buyerFee, order.key.sellAsset);\\n        emitBuy(order, amount, buyer);\\n    }\\n\\n    function validateEthTransfer(uint value, uint buyerFee) internal view {\\n        uint256 buyerFeeValue = value.bp(buyerFee);\\n        require(msg.value == value + buyerFeeValue, \\\"msg.value is incorrect\\\");\\n    }\\n\\n    function cancel(OrderKey calldata key) external {\\n        require(key.owner == msg.sender, \\\"not an owner\\\");\\n        state.setCompleted(key, UINT256_MAX);\\n        emit Cancel(key.sellAsset.token, key.sellAsset.tokenId, msg.sender, key.buyAsset.token, key.buyAsset.tokenId, key.salt);\\n    }\\n\\n    function validateOrderSig(\\n        Order memory order,\\n        Sig memory sig\\n    ) internal view {\\n        if (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\\n            require(ordersHolder.exists(order), \\\"incorrect signature\\\");\\n        } else {\\n            require(prepareMessage(order).recover(sig.v, sig.r, sig.s) == order.key.owner, \\\"incorrect signature\\\");\\n        }\\n    }\\n\\n    function validateBuyerFeeSig(\\n        Order memory order,\\n        uint buyerFee,\\n        Sig memory sig\\n    ) internal view {\\n        require(prepareBuyerFeeMessage(order, buyerFee).recover(sig.v, sig.r, sig.s) == buyerFeeSigner, \\\"incorrect buyer fee signature\\\");\\n    }\\n\\n    function prepareBuyerFeeMessage(Order memory order, uint fee) public pure returns (string memory) {\\n        return keccak256(abi.encode(order, fee)).toString();\\n    }\\n\\n    function prepareMessage(Order memory order) public pure returns (string memory) {\\n        return keccak256(abi.encode(order)).toString();\\n    }\\n\\n    function transferWithFeesPossibility(Asset memory firstType, uint value, address from, address to, bool hasFee, uint256 sellerFee, uint256 buyerFee, Asset memory secondType) internal {\\n        if (!hasFee) {\\n            transfer(firstType, value, from, to);\\n        } else {\\n            transferWithFees(firstType, value, from, to, sellerFee, buyerFee, secondType);\\n        }\\n    }\\n\\n    function transfer(Asset memory asset, uint value, address from, address to) internal {\\n        if (asset.assetType == AssetType.ETH) {\\n            address payable toPayable = payable(to);\\n            toPayable.transfer(value);\\n        } else if (asset.assetType == AssetType.ERC20) {\\n            require(asset.tokenId == 0, \\\"tokenId should be 0\\\");\\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(asset.token), from, to, value);\\n        } else if (asset.assetType == AssetType.ERC721) {\\n            require(value == 1, \\\"value should be 1 for ERC-721\\\");\\n            transferProxy.erc721safeTransferFrom(IERC721(asset.token), from, to, asset.tokenId);\\n        } else if (asset.assetType == AssetType.ERC721Deprecated) {\\n            require(value == 1, \\\"value should be 1 for ERC-721\\\");\\n            transferProxyForDeprecated.erc721TransferFrom(IERC721(asset.token), from, to, asset.tokenId);\\n        } else {\\n            transferProxy.erc1155safeTransferFrom(IERC1155(asset.token), from, to, asset.tokenId, value, \\\"\\\");\\n        }\\n    }\\n\\n    function transferWithFees(Asset memory firstType, uint value, address from, address to, uint256 sellerFee, uint256 buyerFee, Asset memory secondType) internal {\\n        uint restValue = transferFeeToBeneficiary(firstType, from, value, sellerFee, buyerFee);\\n        if (\\n            secondType.assetType == AssetType.ERC1155 && IERC1155(secondType.token).supportsInterface(_INTERFACE_ID_FEES) ||\\n            (secondType.assetType == AssetType.ERC721 || secondType.assetType == AssetType.ERC721Deprecated) && IERC721(secondType.token).supportsInterface(_INTERFACE_ID_FEES)\\n        ) {\\n            HasSecondarySaleFees withFees = HasSecondarySaleFees(secondType.token);\\n            address payable[] memory recipients = withFees.getFeeRecipients(secondType.tokenId);\\n            uint[] memory fees = withFees.getFeeBps(secondType.tokenId);\\n            require(fees.length == recipients.length);\\n            for (uint256 i = 0; i < fees.length; i++) {\\n                (uint newRestValue, uint current) = subFeeInBp(restValue, value, fees[i]);\\n                restValue = newRestValue;\\n                transfer(firstType, current, from, recipients[i]);\\n            }\\n        }\\n        address payable toPayable = payable(to);\\n        transfer(firstType, restValue, from, toPayable);\\n    }\\n\\n    function transferFeeToBeneficiary(Asset memory asset, address from, uint total, uint sellerFee, uint buyerFee) internal returns (uint) {\\n        (uint restValue, uint sellerFeeValue) = subFeeInBp(total, total, sellerFee);\\n        uint buyerFeeValue = total.bp(buyerFee);\\n        uint beneficiaryFee = buyerFeeValue.add(sellerFeeValue);\\n        if (beneficiaryFee > 0) {\\n            transfer(asset, beneficiaryFee, from, beneficiary);\\n        }\\n        return restValue;\\n    }\\n\\n    function emitBuy(Order memory order, uint amount, address buyer) internal {\\n        emit Buy(order.key.sellAsset.token, order.key.sellAsset.tokenId, order.selling,\\n            order.key.owner,\\n            order.key.buyAsset.token, order.key.buyAsset.tokenId, order.buying,\\n            buyer,\\n            amount,\\n            order.key.salt\\n        );\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value - fee;\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    function verifyOpenAndModifyOrderState(OrderKey memory key, uint selling, uint amount) internal {\\n        uint completed = state.getCompleted(key);\\n        uint newCompleted = completed.add(amount);\\n        require(newCompleted <= selling, \\\"not enough stock of order for buying\\\");\\n        state.setCompleted(key, newCompleted);\\n    }\\n\\n    function getFeeSide(AssetType sellType, AssetType buyType) internal pure returns (FeeSide) {\\n        if ((sellType == AssetType.ERC721 || sellType == AssetType.ERC721Deprecated) &&\\n            (buyType == AssetType.ERC721 || buyType == AssetType.ERC721Deprecated)) {\\n            return FeeSide.NONE;\\n        }\\n        if (uint(sellType) > uint(buyType)) {\\n            return FeeSide.BUY;\\n        }\\n        return FeeSide.SELL;\\n    }\\n}\\n\",\"keccak256\":\"0x34a11fc3c0532b63a5f14a0128d7606a04234b40fb63ddd680178ff0bdd6d217\",\"license\":\"MIT\"},\"src/common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe6b0fd58ddc810aa58acc8e1ca5f29469775c74adb950df6afaa9e573a9162cf\",\"license\":\"MIT\"},\"src/common/Ownable.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa9a56e77d7f26f4dec5a5794c387ff70bcb2906e4a507dac5b00d600f4f66131\",\"license\":\"MIT\"},\"src/common/roles/OperatorRole.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../Context.sol\\\";\\nimport \\\"../../libraries/Roles.sol\\\";\\nabstract contract OperatorRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n\\n    }\\n\\n    modifier onlyOperator() {\\n        require(isOperator(_msgSender()), \\\"OperatorRole: caller does not have the Operator role\\\");\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\",\"keccak256\":\"0xd240f99bb1af4805d493b30ddb424e2d71b1d059096f0f132c9d464a5b5360fb\",\"license\":\"MIT\"},\"src/common/roles/OwnableOperatorRole.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../Ownable.sol\\\";\\nimport \\\"./OperatorRole.sol\\\";\\ncontract OwnableOperatorRole is Ownable, OperatorRole {\\n    function addOperator(address account) external onlyOwner {\\n        _addOperator(account);\\n    }\\n\\n    function removeOperator(address account) external onlyOwner {\\n        _removeOperator(account);\\n    }\\n}\",\"keccak256\":\"0xbde2b3e5cab378d11dba2f62e2b1481392817171bf00aa5c69d32bb87a3b773b\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x801185279a866409a85316dbdd01df9bfcc05e10d5c746513b4eca570aa28f24\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x0c4604a1e2216176ec3bc3d3144879ae73313c72c6c3baf62e47089b2ee4249e\",\"license\":\"MIT\"},\"src/interfaces/erc1155/IERC1155.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../IERC165.sol\\\";\\r\\n/**\\r\\n    @title ERC-1155 Multi Token Standard\\r\\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\\r\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\r\\n */\\r\\nabstract contract IERC1155 is IERC165 {\\r\\n    /**\\r\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        The `_operator` argument MUST be msg.sender.\\r\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\r\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\r\\n        The `_id` argument MUST be the token type being transferred.\\r\\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\r\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\r\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\r\\n    */\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n\\r\\n    /**\\r\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        The `_operator` argument MUST be msg.sender.\\r\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\r\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\r\\n        The `_ids` argument MUST be the list of tokens being transferred.\\r\\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\r\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\r\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\r\\n    */\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n\\r\\n    /**\\r\\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\\r\\n    */\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /**\\r\\n        @dev MUST emit when the URI is updated for a token ID.\\r\\n        URIs are defined in RFC 3986.\\r\\n        The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\r\\n    */\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _id      ID of the token type\\r\\n        @param _value   Transfer amount\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\r\\n    */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external virtual;\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\r\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\r\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _ids     IDs of each token type (order and length must match _values array)\\r\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\r\\n    */\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external virtual;\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of an account's Tokens.\\r\\n        @param _owner  The address of the token holder\\r\\n        @param _id     ID of the Token\\r\\n        @return        The _owner's balance of the Token type requested\\r\\n     */\\r\\n    function balanceOf(address _owner, uint256 _id) external view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of multiple account/token pairs\\r\\n        @param _owners The addresses of the token holders\\r\\n        @param _ids    ID of the Tokens\\r\\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view virtual returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\r\\n        @dev MUST emit the ApprovalForAll event on success.\\r\\n        @param _operator  Address to add to the set of authorized operators\\r\\n        @param _approved  True if the operator is approved, false to revoke approval\\r\\n    */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external virtual;\\r\\n\\r\\n    /**\\r\\n        @notice Queries the approval status of an operator for a given owner.\\r\\n        @param _owner     The owner of the Tokens\\r\\n        @param _operator  Address of authorized operator\\r\\n        @return           True if the operator is approved, false if not\\r\\n    */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view virtual returns (bool);\\r\\n}\",\"keccak256\":\"0xf9f4947ee2e9041959fde82278f951cf9dbe2eb8d504bd1eed1b34fb0212fa6b\",\"license\":\"MIT\"},\"src/interfaces/erc721/IERC721.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../IERC165.sol\\\";\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\nabstract contract IERC721 is IERC165 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of NFTs in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     *\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `from`, `to` cannot be zero.\\r\\n     * - `tokenId` must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this\\r\\n     * NFT by either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual;\\r\\n    /**\\r\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\r\\n     * either {approve} or {setApprovalForAll}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual;\\r\\n    function approve(address to, uint256 tokenId) public virtual;\\r\\n    function getApproved(uint256 tokenId) public view virtual returns (address operator);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool _approved) public virtual;\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool);\\r\\n\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual;\\r\\n}\",\"keccak256\":\"0x90307fed5ef9b97b92630d342d29fcd10d00df44eede9613db76a17758e9a574\",\"license\":\"MIT\"},\"src/libraries/BytesLibrary.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nlibrary BytesLibrary {\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(64);\\n        for (uint256 i = 0; i < 32; i++) {\\n            str[i*2] = alphabet[uint8(value[i] >> 4)];\\n            str[1+i*2] = alphabet[uint8(value[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x1731325a8ec2e9ae307a3d1e01e6370a65ae83491b74d473f752725dc241e077\",\"license\":\"MIT\"},\"src/libraries/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd485e0ad64876b7ca593d3c20a2c84f3a80aecf74147108bc5d92dd55d573980\",\"license\":\"MIT\"},\"src/libraries/SafeMath.sol\":{\"content\":\"\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, throws on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        // uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, throws on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd450f20fed90e273b9278342d2a392cb1af56796d8a19824824ee60696f1438c\",\"license\":\"MIT\"},\"src/libraries/StringLibrary.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./UintLibrary.sol\\\";\\r\\nlibrary StringLibrary {\\r\\n    using UintLibrary for uint256;\\r\\n\\r\\n    function append(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory bab = new bytes(_ba.length + _bb.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\r\\n        return string(bab);\\r\\n    }\\r\\n\\r\\n    function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory _bc = bytes(_c);\\r\\n        bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) bbb[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) bbb[k++] = _bb[i];\\r\\n        for (uint i = 0; i < _bc.length; i++) bbb[k++] = _bc[i];\\r\\n        return string(bbb);\\r\\n    }\\r\\n\\r\\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        bytes memory msgBytes = bytes(message);\\r\\n        bytes memory fullMessage = concat(\\r\\n            bytes(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\"),\\r\\n            bytes(msgBytes.length.toString()),\\r\\n            msgBytes,\\r\\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\\r\\n        );\\r\\n        return ecrecover(keccak256(fullMessage), v, r, s);\\r\\n    }\\r\\n\\r\\n    function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {\\r\\n        bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];\\r\\n        for (uint i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];\\r\\n        for (uint i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];\\r\\n        for (uint i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];\\r\\n        for (uint i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];\\r\\n        for (uint i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];\\r\\n        for (uint i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];\\r\\n        return resultBytes;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe4f4f7ee846b8938a04ee4fbbf1e329343f95eba4e5aee7586365894df78ba3\",\"license\":\"MIT\"},\"src/libraries/UintLibrary.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./SafeMath.sol\\\";\\nlibrary UintLibrary {\\n    using SafeMath for uint;\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x9cf7b435b63c0ede500012aa77b773555f32b4be29cfb417cebad2ad7109d4f7\",\"license\":\"MIT\"},\"src/marketplace/ExchangeDomainV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ncontract ExchangeDomainV1 {\\n\\n    enum AssetType {ETH, ERC20, ERC1155, ERC721, ERC721Deprecated}\\n\\n    struct Asset {\\n        address token;\\n        uint tokenId;\\n        AssetType assetType;\\n    }\\n\\n    struct OrderKey {\\n        /* who signed the order */\\n        address owner;\\n        /* random number */\\n        uint salt;\\n\\n        /* what has owner */\\n        Asset sellAsset;\\n\\n        /* what wants owner */\\n        Asset buyAsset;\\n    }\\n\\n    struct Order {\\n        OrderKey key;\\n\\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint selling;\\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint buying;\\n\\n        /* fee for selling */\\n        uint sellerFee;\\n    }\\n\\n    /* An ECDSA signature. */\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n}\",\"keccak256\":\"0x51e298adbbfc19079e8ec6c8526f6a34c48d73010c9f6366e481df9cc938552d\",\"license\":\"MIT\"},\"src/marketplace/ExchangeOrdersHolderV1.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./ExchangeDomainV1.sol\\\";\\ncontract ExchangeOrdersHolderV1 {\\n\\n    mapping(bytes32 => OrderParams) internal orders;\\n\\n    struct OrderParams {\\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint selling;\\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint buying;\\n\\n        /* fee for selling */\\n        uint sellerFee;\\n    }\\n\\n    function add(ExchangeDomainV1.Order calldata order) external {\\n        require(msg.sender == order.key.owner, \\\"order could be added by owner only\\\");\\n        bytes32 key = prepareKey(order);\\n        orders[key] = OrderParams(order.selling, order.buying, order.sellerFee);\\n    }\\n\\n    function exists(ExchangeDomainV1.Order calldata order) external view returns (bool) {\\n        bytes32 key = prepareKey(order);\\n        OrderParams memory params = orders[key];\\n        return params.buying == order.buying && params.selling == order.selling && params.sellerFee == order.sellerFee;\\n    }\\n\\n    function prepareKey(ExchangeDomainV1.Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                order.key.sellAsset.token,\\n                order.key.sellAsset.tokenId,\\n                order.key.owner,\\n                order.key.buyAsset.token,\\n                order.key.buyAsset.tokenId,\\n                order.key.salt\\n            ));\\n    }\\n}\",\"keccak256\":\"0xa7c729029c2d67277d1dcb93cc475a2e0491500d43dee2b9fe50b3a4e9610c6c\",\"license\":\"MIT\"},\"src/marketplace/ExchangeStateV1.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../common/roles/OwnableOperatorRole.sol\\\";\\nimport \\\"./ExchangeDomainV1.sol\\\";\\ncontract ExchangeStateV1 is OwnableOperatorRole {\\n\\n    // keccak256(OrderKey) => completed\\n    mapping(bytes32 => uint256) public completed;\\n\\n    function getCompleted(ExchangeDomainV1.OrderKey calldata key) view external returns (uint256) {\\n        return completed[getCompletedKey(key)];\\n    }\\n\\n    function setCompleted(ExchangeDomainV1.OrderKey calldata key, uint256 newCompleted) external onlyOperator {\\n        completed[getCompletedKey(key)] = newCompleted;\\n    }\\n\\n    function getCompletedKey(ExchangeDomainV1.OrderKey memory key) pure public returns (bytes32) {\\n        return keccak256(abi.encodePacked(key.owner, key.sellAsset.token, key.sellAsset.tokenId, key.buyAsset.token, key.buyAsset.tokenId, key.salt));\\n    }\\n}\",\"keccak256\":\"0x52d8526f0c5aff8873743ec35d5eb72d67be606f3432ac548381359a9cd95b44\",\"license\":\"MIT\"},\"src/marketplace/transferproxy/ERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../../common/roles/OwnableOperatorRole.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\ncontract ERC20TransferProxy is OwnableOperatorRole {\\n\\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external onlyOperator {\\n        require(token.transferFrom(from, to, value), \\\"failure while transferring\\\");\\n    }\\n}\",\"keccak256\":\"0x7921b11e1038260701804817c84c28b9e2128a3c3cbaf6d511cbe209bdc1c364\",\"license\":\"MIT\"},\"src/marketplace/transferproxy/TransferProxy.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../../common/roles/OwnableOperatorRole.sol\\\";\\nimport \\\"../../interfaces/erc721/IERC721.sol\\\";\\nimport \\\"../../interfaces/erc1155/IERC1155.sol\\\";\\ncontract TransferProxy is OwnableOperatorRole {\\n\\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external onlyOperator {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n}\",\"keccak256\":\"0x956ba5d171b301bc542c34bf5a5cd2ee2310d060defaa7719f8b0249a17f7e36\",\"license\":\"MIT\"},\"src/marketplace/transferproxy/TransferProxyForDeprecated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../../common/roles/OwnableOperatorRole.sol\\\";\\nimport \\\"../../interfaces/erc721/IERC721.sol\\\";\\ncontract TransferProxyForDeprecated is OwnableOperatorRole {\\n\\n    function erc721TransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\\n        token.transferFrom(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x4fba8c8112fab7a92caeea438dc12f503a79dab3aa1dd4fb6d2dec298d526b5c\",\"license\":\"MIT\"},\"src/token/shared/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../interfaces/IERC165.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor() {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7d1456dd1651e7b607f2e6a354e5f9d88e2d24799ee9d809384800a7536e14d3\",\"license\":\"MIT\"},\"src/token/shared/HasSecondarySaleFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ERC165.sol\\\";\\r\\nabstract contract HasSecondarySaleFees is ERC165 {\\r\\n\\r\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\r\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\r\\n     *\\r\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(_INTERFACE_ID_FEES);\\r\\n    }\\r\\n\\r\\n    function getFeeRecipients(uint256 id) public view virtual returns (address payable[] memory);\\r\\n    function getFeeBps(uint256 id) public view virtual returns (uint[] memory);\\r\\n}\",\"keccak256\":\"0x378a40cce8e08bb791df246fc052da273da1043418f2161d76ff3bd6827fa9fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200296c3803806200296c83398101604081905262000034916200012a565b6200003f33620000c1565b600380546001600160a01b03199081166001600160a01b03998a1617909155600480548216978916979097179096556005805487169588169590951790945560068054861693871693909317909255600780548516918616919091179055600180548416918516919091179055600280549092169216919091179055620001d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200012757600080fd5b50565b600080600080600080600060e0888a0312156200014657600080fd5b8751620001538162000111565b6020890151909750620001668162000111565b6040890151909650620001798162000111565b60608901519095506200018c8162000111565b60808901519094506200019f8162000111565b60a0890151909350620001b28162000111565b60c0890151909250620001c58162000111565b8091505092959891949750929550565b61278780620001e56000396000f3fe6080604052600436106100f35760003560e01c8063715018a61161008a578063c19d93fb11610059578063c19d93fb1461028a578063ca120b1f146102aa578063f2fde38b146102ca578063fee03e9e146102ea57600080fd5b8063715018a6146102245780638da5cb5b146102395780639704dc44146102575780639cec63921461027757600080fd5b806338af3eed116100c657806338af3eed146101a45780634df97bc5146101c457806355d5d326146101e45780636e667db31461020457600080fd5b806302329e10146100f8578063049944b6146101355780631b4c9874146101625780631c31f71014610182575b600080fd5b34801561010457600080fd5b50600454610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004612123565b61030a565b60405161012c9190612140565b34801561016e57600080fd5b5061015561017d366004612195565b610341565b34801561018e57600080fd5b506101a261019d3660046121c2565b610360565b005b3480156101b057600080fd5b50600154610118906001600160a01b031681565b3480156101d057600080fd5b50600254610118906001600160a01b031681565b3480156101f057600080fd5b506101a26101ff3660046121c2565b6103ee565b34801561021057600080fd5b50600354610118906001600160a01b031681565b34801561023057600080fd5b506101a2610477565b34801561024557600080fd5b506000546001600160a01b0316610118565b34801561026357600080fd5b50600754610118906001600160a01b031681565b6101a26102853660046121f7565b6104dd565b34801561029657600080fd5b50600654610118906001600160a01b031681565b3480156102b657600080fd5b506101a26102c5366004612272565b61074a565b3480156102d657600080fd5b506101a26102e53660046121c2565b6108b9565b3480156102f657600080fd5b50600554610118906001600160a01b031681565b606061033b826040516020016103209190612350565b6040516020818303038152906040528051906020012061099b565b92915050565b6060610359838360405160200161032092919061235f565b9392505050565b6000546001600160a01b031633146103bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6104db6000610b08565b565b6105036104ef36889003880188612123565b6104fe3688900388018861237c565b610b65565b61052a61051536889003880188612123565b856105253687900387018761237c565b610d00565b600061054a6101008801356105446101208a013586610d86565b90610db9565b905061056a61055e368990038901896123e4565b88610100013585610dc5565b600061057c60a0890160808a01612401565b600481111561058d5761058d612285565b14156106015760405162461bcd60e51b815260206004820152602160248201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c2073696460448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016103b6565b6000610614610100890160e08a01612401565b600481111561062557610625612285565b1415610635576106358186610f68565b600061066061064a60a08a0160808b01612401565b61065b6101008b0160e08c01612401565b610fce565b90506001600160a01b038316610674573392505b6106d0610689368a90038a0160408b0161241c565b8561069760208c018c6121c2565b8660018660028111156106ac576106ac612285565b148b8e61014001358f60000160a0018036038101906106cb919061241c565b611081565b6107276106e5368a90038a0160a08b0161241c565b83336106f460208d018d6121c2565b600286600281111561070857610708612285565b148d61014001358c8f6000016040018036038101906106cb919061241c565b610740610739368a90038a018a612123565b85856110a6565b5050505050505050565b3361075860208301836121c2565b6001600160a01b0316146107ae5760405162461bcd60e51b815260206004820152600c60248201527f6e6f7420616e206f776e6572000000000000000000000000000000000000000060448201526064016103b6565b6006546040517f3a076e9a0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633a076e9a906107fb90849060001990600401612471565b600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050606082018035915061084190604084016121c2565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361087c60c0860160a087016121c2565b604080516001600160a01b0393841681529190921660208083019190915260c087013582840152860135606082015290519081900360800190a350565b6000546001600160a01b031633146109135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6001600160a01b03811661098f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b6565b61099881610b08565b50565b604080518082018252601081527f30313233343536373839616263646566000000000000000000000000000000006020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610b0057826004868360208110610a0f57610a0f6124c6565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610a3557610a356124c6565b01602001516001600160f81b03191682610a508360026124f2565b81518110610a6057610a606124c6565b60200101906001600160f81b031916908160001a90535082858260208110610a8a57610a8a6124c6565b825191901a600f16908110610aa157610aa16124c6565b01602001516001600160f81b03191682610abc8360026124f2565b610ac7906001612511565b81518110610ad757610ad76124c6565b60200101906001600160f81b031916908160001a90535080610af881612529565b9150506109f1565b509392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160ff16158015610b7957506020810151155b8015610b8757506040810151155b15610c75576007546040517f2aee7a310000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632aee7a3190610bd5908590600401612350565b60206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190612544565b610c715760405162461bcd60e51b815260206004820152601360248201527f696e636f7272656374207369676e61747572650000000000000000000000000060448201526064016103b6565b5050565b8160000151600001516001600160a01b0316610caa826000015183602001518460400151610ca28761030a565b92919061114a565b6001600160a01b031614610c715760405162461bcd60e51b815260206004820152601360248201527f696e636f7272656374207369676e61747572650000000000000000000000000060448201526064016103b6565b6002548151602083015160408401516001600160a01b0390931692610d2b929190610ca28888610341565b6001600160a01b031614610d815760405162461bcd60e51b815260206004820152601d60248201527f696e636f727265637420627579657220666565207369676e617475726500000060448201526064016103b6565b505050565b600082610d955750600061033b565b610d9f82846124f2565b905081610dac848361257c565b1461033b5761033b612590565b6000610359828461257c565b6006546040517ffb0000c00000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063fb0000c090610e0f9087906004016125a6565b60206040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906125b5565b90506000610e6d828461123f565b905083811115610ee45760405162461bcd60e51b8152602060048201526024808201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560448201527f79696e670000000000000000000000000000000000000000000000000000000060648201526084016103b6565b6006546040517f3a076e9a0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633a076e9a90610f2f90889085906004016125ce565b600060405180830381600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b505050505050505050565b6000610f74838361125d565b9050610f808184612511565b3414610d815760405162461bcd60e51b815260206004820152601660248201527f6d73672e76616c756520697320696e636f72726563740000000000000000000060448201526064016103b6565b60006003836004811115610fe457610fe4612285565b148061100157506004836004811115610fff57610fff612285565b145b80156110395750600382600481111561101c5761101c612285565b14806110395750600482600481111561103757611037612285565b145b156110465750600061033b565b81600481111561105857611058612285565b83600481111561106a5761106a612285565b11156110785750600261033b565b50600192915050565b83611097576110928888888861126f565b610740565b6107408888888887878761162c565b82516040808201516020808201519151818801518551606080880151805190860151888d01519987015189519586526001600160a01b03948516978601979097529083168489015290830152608082019690965286861660a082015260c0810188905260e081019290925292519193909216917fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c391908190036101000190a3505050565b60008085905060006111c26040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a00000000000081525061119584516119d3565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611af5565b90506001818051906020012087878760405160008152602001604052604051611207949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611229573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b600061124b8284612511565b90508281101561033b5761033b612590565b60006103596127106105448585610d86565b60008460400151600481111561128757611287612285565b14156112cc5760405181906001600160a01b0382169085156108fc029086906000818181858888f193505050501580156112c5573d6000803e3d6000fd5b5050611626565b6001846040015160048111156112e4576112e4612285565b14156113d25760208401511561133c5760405162461bcd60e51b815260206004820152601360248201527f746f6b656e49642073686f756c6420626520300000000000000000000000000060448201526064016103b6565b60055484516040517f776062c30000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152848216602482015283821660448201526064810186905291169063776062c3906084015b600060405180830381600087803b1580156113b557600080fd5b505af11580156113c9573d6000803e3d6000fd5b50505050611626565b6003846040015160048111156113ea576113ea612285565b14156114a957826001146114405760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d37323100000060448201526064016103b6565b600354845160208601516040517ff709b9060000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015285831660248201528483166044820152606481019190915291169063f709b9069060840161139b565b6004846040015160048111156114c1576114c1612285565b141561157f57826001146115175760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d37323100000060448201526064016103b6565b60048054855160208701516040517f8450ebe40000000000000000000000000000000000000000000000000000000081526001600160a01b03928316948101949094528582166024850152848216604485015260648401521690638450ebe49060840161139b565b600354845160208601516040517f9c1c2ee90000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201528583166024820152848316604482015260648101919091526084810186905260c060a4820152600060c4820152911690639c1c2ee99060e401600060405180830381600087803b15801561161257600080fd5b505af1158015610740573d6000803e3d6000fd5b50505050565b600061163b8887898787611ec3565b905060028260400151600481111561165557611655612285565b148015611710575081516040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fb77995840000000000000000000000000000000000000000000000000000000060048201526001600160a01b03909116906301ffc9a79060240160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190612544565b80611809575060038260400151600481111561172e5761172e612285565b148061174f575060048260400151600481111561174d5761174d612285565b145b8015611809575081516040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fb77995840000000000000000000000000000000000000000000000000000000060048201526001600160a01b03909116906301ffc9a79060240160206040518083038186803b1580156117d157600080fd5b505afa1580156117e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118099190612544565b156119c657815160208301516040517fb9c4d9fb0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0384169163b9c4d9fb9161185f9160040190815260200190565b60006040518083038186803b15801561187757600080fd5b505afa15801561188b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118b39190810190612601565b90506000826001600160a01b0316630ebd4c7f86602001516040518263ffffffff1660e01b81526004016118e991815260200190565b60006040518083038186803b15801561190157600080fd5b505afa158015611915573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261193d91908101906126a0565b9050815181511461194d57600080fd5b60005b81518110156119c157600080611980878e868681518110611973576119736124c6565b6020026020010151611f23565b915091508196506119ac8e828e88878151811061199f5761199f6124c6565b602002602001015161126f565b505080806119b990612529565b915050611950565b505050505b84610f5d8983898461126f565b606081611a1357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611a3d5780611a2781612529565b9150611a369050600a8361257c565b9150611a17565b60008167ffffffffffffffff811115611a5857611a58611f72565b6040519080825280601f01601f191660200182016040528015611a82576020820181803683370190505b5090505b8415611aed57611a97600183612726565b9150611aa4600a8661273d565b611aaf906030612511565b60f81b818381518110611ac457611ac46124c6565b60200101906001600160f81b031916908160001a905350611ae6600a8661257c565b9450611a86565b949350505050565b6060600082518451865188518a518c518e51611b119190612511565b611b1b9190612511565b611b259190612511565b611b2f9190612511565b611b399190612511565b611b439190612511565b67ffffffffffffffff811115611b5b57611b5b611f72565b6040519080825280601f01601f191660200182016040528015611b85576020820181803683370190505b5090506000805b8a51811015611bfc578a8181518110611ba757611ba76124c6565b01602001516001600160f81b0319168383611bc181612529565b945081518110611bd357611bd36124c6565b60200101906001600160f81b031916908160001a90535080611bf481612529565b915050611b8c565b5060005b8951811015611c7057898181518110611c1b57611c1b6124c6565b01602001516001600160f81b0319168383611c3581612529565b945081518110611c4757611c476124c6565b60200101906001600160f81b031916908160001a90535080611c6881612529565b915050611c00565b5060005b8851811015611ce457888181518110611c8f57611c8f6124c6565b01602001516001600160f81b0319168383611ca981612529565b945081518110611cbb57611cbb6124c6565b60200101906001600160f81b031916908160001a90535080611cdc81612529565b915050611c74565b5060005b8751811015611d5857878181518110611d0357611d036124c6565b01602001516001600160f81b0319168383611d1d81612529565b945081518110611d2f57611d2f6124c6565b60200101906001600160f81b031916908160001a90535080611d5081612529565b915050611ce8565b5060005b8651811015611dcc57868181518110611d7757611d776124c6565b01602001516001600160f81b0319168383611d9181612529565b945081518110611da357611da36124c6565b60200101906001600160f81b031916908160001a90535080611dc481612529565b915050611d5c565b5060005b8551811015611e4057858181518110611deb57611deb6124c6565b01602001516001600160f81b0319168383611e0581612529565b945081518110611e1757611e176124c6565b60200101906001600160f81b031916908160001a90535080611e3881612529565b915050611dd0565b5060005b8451811015611eb457848181518110611e5f57611e5f6124c6565b01602001516001600160f81b0319168383611e7981612529565b945081518110611e8b57611e8b6124c6565b60200101906001600160f81b031916908160001a90535080611eac81612529565b915050611e44565b50909998505050505050505050565b6000806000611ed3868787611f23565b90925090506000611ee4878661125d565b90506000611ef2828461123f565b90508015611f1557600154611f15908b9083908c906001600160a01b031661126f565b509198975050505050505050565b600080611f3985611f34868661125d565b611f45565b91509150935093915050565b60008082841115611f6457611f5a8385612726565b9150829050611f6b565b5060009050825b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611fab57611fab611f72565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fda57611fda611f72565b604052919050565b6001600160a01b038116811461099857600080fd5b80356005811061200657600080fd5b919050565b60006060828403121561201d57600080fd5b6040516060810181811067ffffffffffffffff8211171561204057612040611f72565b604052905080823561205181611fe2565b81526020838101359082015261206960408401611ff7565b60408201525092915050565b6000610100828403121561208857600080fd5b612090611f88565b9050813561209d81611fe2565b8152602082810135908201526120b6836040840161200b565b60408201526120c88360a0840161200b565b606082015292915050565b600061016082840312156120e657600080fd5b6120ee611f88565b90506120fa8383612075565b815261010082013560208201526101208201356040820152610140820135606082015292915050565b6000610160828403121561213657600080fd5b61035983836120d3565b600060208083528351808285015260005b8181101561216d57858101830151858201604001528201612151565b8181111561217f576000604083870101525b50601f01601f1916929092016040019392505050565b60008061018083850312156121a957600080fd5b6121b384846120d3565b94610160939093013593505050565b6000602082840312156121d457600080fd5b813561035981611fe2565b6000606082840312156121f157600080fd5b50919050565b60008060008060008086880361028081121561221257600080fd5b6101608082121561222257600080fd5b8897506122318a828b016121df565b965050506101c0870135935061224b886101e089016121df565b9250610240870135915061026087013561226481611fe2565b809150509295509295509295565b600061010082840312156121f157600080fd5b634e487b7160e01b600052602160045260246000fd5b600581106122b957634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038151168252602081015160208301526040810151610d81604084018261229b565b6001600160a01b03815116825260208101516020830152604081015161230f60408401826122bd565b506060810151610d8160a08401826122bd565b61232d8282516122e6565b602081015161010083015260408101516101208301526060015161014090910152565b610160810161033b8284612322565b610180810161236e8285612322565b826101608301529392505050565b60006060828403121561238e57600080fd5b6040516060810181811067ffffffffffffffff821117156123b1576123b1611f72565b604052823560ff811681146123c557600080fd5b8152602083810135908201526040928301359281019290925250919050565b600061010082840312156123f757600080fd5b6103598383612075565b60006020828403121561241357600080fd5b61035982611ff7565b60006060828403121561242e57600080fd5b610359838361200b565b803561244381611fe2565b6001600160a01b031682526020818101359083015261246460408201611ff7565b610d81604084018261229b565b6101208101833561248181611fe2565b6001600160a01b038116835250602084013560208301526124a86040830160408601612438565b6124b860a0830160a08601612438565b826101008301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561250c5761250c6124dc565b500290565b60008219821115612524576125246124dc565b500190565b600060001982141561253d5761253d6124dc565b5060010190565b60006020828403121561255657600080fd5b8151801515811461035957600080fd5b634e487b7160e01b600052601260045260246000fd5b60008261258b5761258b612566565b500490565b634e487b7160e01b600052600160045260246000fd5b610100810161033b82846122e6565b6000602082840312156125c757600080fd5b5051919050565b61012081016124b882856122e6565b600067ffffffffffffffff8211156125f7576125f7611f72565b5060051b60200190565b6000602080838503121561261457600080fd5b825167ffffffffffffffff81111561262b57600080fd5b8301601f8101851361263c57600080fd5b805161264f61264a826125dd565b611fb1565b81815260059190911b8201830190838101908783111561266e57600080fd5b928401925b8284101561269557835161268681611fe2565b82529284019290840190612673565b979650505050505050565b600060208083850312156126b357600080fd5b825167ffffffffffffffff8111156126ca57600080fd5b8301601f810185136126db57600080fd5b80516126e961264a826125dd565b81815260059190911b8201830190838101908783111561270857600080fd5b928401925b828410156126955783518252928401929084019061270d565b600082821015612738576127386124dc565b500390565b60008261274c5761274c612566565b50069056fea2646970667358221220f4cc3d8e6ba11bd5d317038118a32233f418a49bf59e05f4a9f75e83d5554dbc64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063715018a61161008a578063c19d93fb11610059578063c19d93fb1461028a578063ca120b1f146102aa578063f2fde38b146102ca578063fee03e9e146102ea57600080fd5b8063715018a6146102245780638da5cb5b146102395780639704dc44146102575780639cec63921461027757600080fd5b806338af3eed116100c657806338af3eed146101a45780634df97bc5146101c457806355d5d326146101e45780636e667db31461020457600080fd5b806302329e10146100f8578063049944b6146101355780631b4c9874146101625780631c31f71014610182575b600080fd5b34801561010457600080fd5b50600454610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004612123565b61030a565b60405161012c9190612140565b34801561016e57600080fd5b5061015561017d366004612195565b610341565b34801561018e57600080fd5b506101a261019d3660046121c2565b610360565b005b3480156101b057600080fd5b50600154610118906001600160a01b031681565b3480156101d057600080fd5b50600254610118906001600160a01b031681565b3480156101f057600080fd5b506101a26101ff3660046121c2565b6103ee565b34801561021057600080fd5b50600354610118906001600160a01b031681565b34801561023057600080fd5b506101a2610477565b34801561024557600080fd5b506000546001600160a01b0316610118565b34801561026357600080fd5b50600754610118906001600160a01b031681565b6101a26102853660046121f7565b6104dd565b34801561029657600080fd5b50600654610118906001600160a01b031681565b3480156102b657600080fd5b506101a26102c5366004612272565b61074a565b3480156102d657600080fd5b506101a26102e53660046121c2565b6108b9565b3480156102f657600080fd5b50600554610118906001600160a01b031681565b606061033b826040516020016103209190612350565b6040516020818303038152906040528051906020012061099b565b92915050565b6060610359838360405160200161032092919061235f565b9392505050565b6000546001600160a01b031633146103bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6104db6000610b08565b565b6105036104ef36889003880188612123565b6104fe3688900388018861237c565b610b65565b61052a61051536889003880188612123565b856105253687900387018761237c565b610d00565b600061054a6101008801356105446101208a013586610d86565b90610db9565b905061056a61055e368990038901896123e4565b88610100013585610dc5565b600061057c60a0890160808a01612401565b600481111561058d5761058d612285565b14156106015760405162461bcd60e51b815260206004820152602160248201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c2073696460448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016103b6565b6000610614610100890160e08a01612401565b600481111561062557610625612285565b1415610635576106358186610f68565b600061066061064a60a08a0160808b01612401565b61065b6101008b0160e08c01612401565b610fce565b90506001600160a01b038316610674573392505b6106d0610689368a90038a0160408b0161241c565b8561069760208c018c6121c2565b8660018660028111156106ac576106ac612285565b148b8e61014001358f60000160a0018036038101906106cb919061241c565b611081565b6107276106e5368a90038a0160a08b0161241c565b83336106f460208d018d6121c2565b600286600281111561070857610708612285565b148d61014001358c8f6000016040018036038101906106cb919061241c565b610740610739368a90038a018a612123565b85856110a6565b5050505050505050565b3361075860208301836121c2565b6001600160a01b0316146107ae5760405162461bcd60e51b815260206004820152600c60248201527f6e6f7420616e206f776e6572000000000000000000000000000000000000000060448201526064016103b6565b6006546040517f3a076e9a0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633a076e9a906107fb90849060001990600401612471565b600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050606082018035915061084190604084016121c2565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361087c60c0860160a087016121c2565b604080516001600160a01b0393841681529190921660208083019190915260c087013582840152860135606082015290519081900360800190a350565b6000546001600160a01b031633146109135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b6565b6001600160a01b03811661098f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b6565b61099881610b08565b50565b604080518082018252601081527f30313233343536373839616263646566000000000000000000000000000000006020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610b0057826004868360208110610a0f57610a0f6124c6565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610a3557610a356124c6565b01602001516001600160f81b03191682610a508360026124f2565b81518110610a6057610a606124c6565b60200101906001600160f81b031916908160001a90535082858260208110610a8a57610a8a6124c6565b825191901a600f16908110610aa157610aa16124c6565b01602001516001600160f81b03191682610abc8360026124f2565b610ac7906001612511565b81518110610ad757610ad76124c6565b60200101906001600160f81b031916908160001a90535080610af881612529565b9150506109f1565b509392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160ff16158015610b7957506020810151155b8015610b8757506040810151155b15610c75576007546040517f2aee7a310000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632aee7a3190610bd5908590600401612350565b60206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190612544565b610c715760405162461bcd60e51b815260206004820152601360248201527f696e636f7272656374207369676e61747572650000000000000000000000000060448201526064016103b6565b5050565b8160000151600001516001600160a01b0316610caa826000015183602001518460400151610ca28761030a565b92919061114a565b6001600160a01b031614610c715760405162461bcd60e51b815260206004820152601360248201527f696e636f7272656374207369676e61747572650000000000000000000000000060448201526064016103b6565b6002548151602083015160408401516001600160a01b0390931692610d2b929190610ca28888610341565b6001600160a01b031614610d815760405162461bcd60e51b815260206004820152601d60248201527f696e636f727265637420627579657220666565207369676e617475726500000060448201526064016103b6565b505050565b600082610d955750600061033b565b610d9f82846124f2565b905081610dac848361257c565b1461033b5761033b612590565b6000610359828461257c565b6006546040517ffb0000c00000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063fb0000c090610e0f9087906004016125a6565b60206040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906125b5565b90506000610e6d828461123f565b905083811115610ee45760405162461bcd60e51b8152602060048201526024808201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560448201527f79696e670000000000000000000000000000000000000000000000000000000060648201526084016103b6565b6006546040517f3a076e9a0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633a076e9a90610f2f90889085906004016125ce565b600060405180830381600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b505050505050505050565b6000610f74838361125d565b9050610f808184612511565b3414610d815760405162461bcd60e51b815260206004820152601660248201527f6d73672e76616c756520697320696e636f72726563740000000000000000000060448201526064016103b6565b60006003836004811115610fe457610fe4612285565b148061100157506004836004811115610fff57610fff612285565b145b80156110395750600382600481111561101c5761101c612285565b14806110395750600482600481111561103757611037612285565b145b156110465750600061033b565b81600481111561105857611058612285565b83600481111561106a5761106a612285565b11156110785750600261033b565b50600192915050565b83611097576110928888888861126f565b610740565b6107408888888887878761162c565b82516040808201516020808201519151818801518551606080880151805190860151888d01519987015189519586526001600160a01b03948516978601979097529083168489015290830152608082019690965286861660a082015260c0810188905260e081019290925292519193909216917fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c391908190036101000190a3505050565b60008085905060006111c26040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a00000000000081525061119584516119d3565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611af5565b90506001818051906020012087878760405160008152602001604052604051611207949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611229573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b600061124b8284612511565b90508281101561033b5761033b612590565b60006103596127106105448585610d86565b60008460400151600481111561128757611287612285565b14156112cc5760405181906001600160a01b0382169085156108fc029086906000818181858888f193505050501580156112c5573d6000803e3d6000fd5b5050611626565b6001846040015160048111156112e4576112e4612285565b14156113d25760208401511561133c5760405162461bcd60e51b815260206004820152601360248201527f746f6b656e49642073686f756c6420626520300000000000000000000000000060448201526064016103b6565b60055484516040517f776062c30000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152848216602482015283821660448201526064810186905291169063776062c3906084015b600060405180830381600087803b1580156113b557600080fd5b505af11580156113c9573d6000803e3d6000fd5b50505050611626565b6003846040015160048111156113ea576113ea612285565b14156114a957826001146114405760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d37323100000060448201526064016103b6565b600354845160208601516040517ff709b9060000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015285831660248201528483166044820152606481019190915291169063f709b9069060840161139b565b6004846040015160048111156114c1576114c1612285565b141561157f57826001146115175760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d37323100000060448201526064016103b6565b60048054855160208701516040517f8450ebe40000000000000000000000000000000000000000000000000000000081526001600160a01b03928316948101949094528582166024850152848216604485015260648401521690638450ebe49060840161139b565b600354845160208601516040517f9c1c2ee90000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201528583166024820152848316604482015260648101919091526084810186905260c060a4820152600060c4820152911690639c1c2ee99060e401600060405180830381600087803b15801561161257600080fd5b505af1158015610740573d6000803e3d6000fd5b50505050565b600061163b8887898787611ec3565b905060028260400151600481111561165557611655612285565b148015611710575081516040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fb77995840000000000000000000000000000000000000000000000000000000060048201526001600160a01b03909116906301ffc9a79060240160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190612544565b80611809575060038260400151600481111561172e5761172e612285565b148061174f575060048260400151600481111561174d5761174d612285565b145b8015611809575081516040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fb77995840000000000000000000000000000000000000000000000000000000060048201526001600160a01b03909116906301ffc9a79060240160206040518083038186803b1580156117d157600080fd5b505afa1580156117e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118099190612544565b156119c657815160208301516040517fb9c4d9fb0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0384169163b9c4d9fb9161185f9160040190815260200190565b60006040518083038186803b15801561187757600080fd5b505afa15801561188b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118b39190810190612601565b90506000826001600160a01b0316630ebd4c7f86602001516040518263ffffffff1660e01b81526004016118e991815260200190565b60006040518083038186803b15801561190157600080fd5b505afa158015611915573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261193d91908101906126a0565b9050815181511461194d57600080fd5b60005b81518110156119c157600080611980878e868681518110611973576119736124c6565b6020026020010151611f23565b915091508196506119ac8e828e88878151811061199f5761199f6124c6565b602002602001015161126f565b505080806119b990612529565b915050611950565b505050505b84610f5d8983898461126f565b606081611a1357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611a3d5780611a2781612529565b9150611a369050600a8361257c565b9150611a17565b60008167ffffffffffffffff811115611a5857611a58611f72565b6040519080825280601f01601f191660200182016040528015611a82576020820181803683370190505b5090505b8415611aed57611a97600183612726565b9150611aa4600a8661273d565b611aaf906030612511565b60f81b818381518110611ac457611ac46124c6565b60200101906001600160f81b031916908160001a905350611ae6600a8661257c565b9450611a86565b949350505050565b6060600082518451865188518a518c518e51611b119190612511565b611b1b9190612511565b611b259190612511565b611b2f9190612511565b611b399190612511565b611b439190612511565b67ffffffffffffffff811115611b5b57611b5b611f72565b6040519080825280601f01601f191660200182016040528015611b85576020820181803683370190505b5090506000805b8a51811015611bfc578a8181518110611ba757611ba76124c6565b01602001516001600160f81b0319168383611bc181612529565b945081518110611bd357611bd36124c6565b60200101906001600160f81b031916908160001a90535080611bf481612529565b915050611b8c565b5060005b8951811015611c7057898181518110611c1b57611c1b6124c6565b01602001516001600160f81b0319168383611c3581612529565b945081518110611c4757611c476124c6565b60200101906001600160f81b031916908160001a90535080611c6881612529565b915050611c00565b5060005b8851811015611ce457888181518110611c8f57611c8f6124c6565b01602001516001600160f81b0319168383611ca981612529565b945081518110611cbb57611cbb6124c6565b60200101906001600160f81b031916908160001a90535080611cdc81612529565b915050611c74565b5060005b8751811015611d5857878181518110611d0357611d036124c6565b01602001516001600160f81b0319168383611d1d81612529565b945081518110611d2f57611d2f6124c6565b60200101906001600160f81b031916908160001a90535080611d5081612529565b915050611ce8565b5060005b8651811015611dcc57868181518110611d7757611d776124c6565b01602001516001600160f81b0319168383611d9181612529565b945081518110611da357611da36124c6565b60200101906001600160f81b031916908160001a90535080611dc481612529565b915050611d5c565b5060005b8551811015611e4057858181518110611deb57611deb6124c6565b01602001516001600160f81b0319168383611e0581612529565b945081518110611e1757611e176124c6565b60200101906001600160f81b031916908160001a90535080611e3881612529565b915050611dd0565b5060005b8451811015611eb457848181518110611e5f57611e5f6124c6565b01602001516001600160f81b0319168383611e7981612529565b945081518110611e8b57611e8b6124c6565b60200101906001600160f81b031916908160001a90535080611eac81612529565b915050611e44565b50909998505050505050505050565b6000806000611ed3868787611f23565b90925090506000611ee4878661125d565b90506000611ef2828461123f565b90508015611f1557600154611f15908b9083908c906001600160a01b031661126f565b509198975050505050505050565b600080611f3985611f34868661125d565b611f45565b91509150935093915050565b60008082841115611f6457611f5a8385612726565b9150829050611f6b565b5060009050825b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611fab57611fab611f72565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fda57611fda611f72565b604052919050565b6001600160a01b038116811461099857600080fd5b80356005811061200657600080fd5b919050565b60006060828403121561201d57600080fd5b6040516060810181811067ffffffffffffffff8211171561204057612040611f72565b604052905080823561205181611fe2565b81526020838101359082015261206960408401611ff7565b60408201525092915050565b6000610100828403121561208857600080fd5b612090611f88565b9050813561209d81611fe2565b8152602082810135908201526120b6836040840161200b565b60408201526120c88360a0840161200b565b606082015292915050565b600061016082840312156120e657600080fd5b6120ee611f88565b90506120fa8383612075565b815261010082013560208201526101208201356040820152610140820135606082015292915050565b6000610160828403121561213657600080fd5b61035983836120d3565b600060208083528351808285015260005b8181101561216d57858101830151858201604001528201612151565b8181111561217f576000604083870101525b50601f01601f1916929092016040019392505050565b60008061018083850312156121a957600080fd5b6121b384846120d3565b94610160939093013593505050565b6000602082840312156121d457600080fd5b813561035981611fe2565b6000606082840312156121f157600080fd5b50919050565b60008060008060008086880361028081121561221257600080fd5b6101608082121561222257600080fd5b8897506122318a828b016121df565b965050506101c0870135935061224b886101e089016121df565b9250610240870135915061026087013561226481611fe2565b809150509295509295509295565b600061010082840312156121f157600080fd5b634e487b7160e01b600052602160045260246000fd5b600581106122b957634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038151168252602081015160208301526040810151610d81604084018261229b565b6001600160a01b03815116825260208101516020830152604081015161230f60408401826122bd565b506060810151610d8160a08401826122bd565b61232d8282516122e6565b602081015161010083015260408101516101208301526060015161014090910152565b610160810161033b8284612322565b610180810161236e8285612322565b826101608301529392505050565b60006060828403121561238e57600080fd5b6040516060810181811067ffffffffffffffff821117156123b1576123b1611f72565b604052823560ff811681146123c557600080fd5b8152602083810135908201526040928301359281019290925250919050565b600061010082840312156123f757600080fd5b6103598383612075565b60006020828403121561241357600080fd5b61035982611ff7565b60006060828403121561242e57600080fd5b610359838361200b565b803561244381611fe2565b6001600160a01b031682526020818101359083015261246460408201611ff7565b610d81604084018261229b565b6101208101833561248181611fe2565b6001600160a01b038116835250602084013560208301526124a86040830160408601612438565b6124b860a0830160a08601612438565b826101008301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561250c5761250c6124dc565b500290565b60008219821115612524576125246124dc565b500190565b600060001982141561253d5761253d6124dc565b5060010190565b60006020828403121561255657600080fd5b8151801515811461035957600080fd5b634e487b7160e01b600052601260045260246000fd5b60008261258b5761258b612566565b500490565b634e487b7160e01b600052600160045260246000fd5b610100810161033b82846122e6565b6000602082840312156125c757600080fd5b5051919050565b61012081016124b882856122e6565b600067ffffffffffffffff8211156125f7576125f7611f72565b5060051b60200190565b6000602080838503121561261457600080fd5b825167ffffffffffffffff81111561262b57600080fd5b8301601f8101851361263c57600080fd5b805161264f61264a826125dd565b611fb1565b81815260059190911b8201830190838101908783111561266e57600080fd5b928401925b8284101561269557835161268681611fe2565b82529284019290840190612673565b979650505050505050565b600060208083850312156126b357600080fd5b825167ffffffffffffffff8111156126ca57600080fd5b8301601f810185136126db57600080fd5b80516126e961264a826125dd565b81815260059190911b8201830190838101908783111561270857600080fd5b928401925b828410156126955783518252928401929084019061270d565b600082821015612738576127386124dc565b500390565b60008261274c5761274c612566565b50069056fea2646970667358221220f4cc3d8e6ba11bd5d317038118a32233f418a49bf59e05f4a9f75e83d5554dbc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1540,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 492,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "beneficiary",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 494,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "buyerFeeSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 497,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "transferProxy",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(TransferProxy)3824"
      },
      {
        "astId": 500,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "transferProxyForDeprecated",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TransferProxyForDeprecated)3854"
      },
      {
        "astId": 503,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20TransferProxy)3764"
      },
      {
        "astId": 506,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "state",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ExchangeStateV1)3732"
      },
      {
        "astId": 509,
        "contract": "src/ExchangeV1.sol:ExchangeV1",
        "label": "ordersHolder",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ExchangeOrdersHolderV1)3655"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20TransferProxy)3764": {
        "encoding": "inplace",
        "label": "contract ERC20TransferProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeOrdersHolderV1)3655": {
        "encoding": "inplace",
        "label": "contract ExchangeOrdersHolderV1",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeStateV1)3732": {
        "encoding": "inplace",
        "label": "contract ExchangeStateV1",
        "numberOfBytes": "20"
      },
      "t_contract(TransferProxy)3824": {
        "encoding": "inplace",
        "label": "contract TransferProxy",
        "numberOfBytes": "20"
      },
      "t_contract(TransferProxyForDeprecated)3854": {
        "encoding": "inplace",
        "label": "contract TransferProxyForDeprecated",
        "numberOfBytes": "20"
      }
    }
  }
}